import { Contact, ContactStatus, ClientFile, EmailType, Civility } from '../types';
import { v4 as uuidv4 } from 'uuid'; // For generating unique IDs
import Papa from 'papaparse'; // For CSV parsing
import * as XLSX from 'xlsx'; // For Excel parsing and writing

const LOCAL_STORAGE_KEY = 'dimiCallContacts';
const CALL_STATES_KEY = 'dimiCallCallStates';

// Cl√© pour la sauvegarde de la table import√©e
const IMPORTED_TABLE_KEY = 'dimicall_imported_table';
const IMPORTED_TABLE_METADATA_KEY = 'dimicall_imported_table_metadata';

// Utility function to format phone numbers
export const formatPhoneNumber = (phoneStr: string): string => {
  if (!phoneStr) return '';
  
  // Nettoyer tous les caract√®res sauf les chiffres et le +
  let cleaned = phoneStr.replace(/[^\d+]/g, "");

  // Cas sp√©cial: +33(0) - supprimer le 0 apr√®s +33
  if (cleaned.match(/^\+330/)) {
    cleaned = cleaned.replace(/^\+330/, '+33');
  }

  // Cas sp√©cial: num√©ro sans + devant 33
  if (cleaned.match(/^33\d{9}$/)) {
    cleaned = '+' + cleaned;
  }

  // Si d√©j√† au bon format +33 avec 9 chiffres apr√®s
  const matchPlus = cleaned.match(/^\+33(\d{9})$/);
  if (matchPlus) {
    const num = matchPlus[1];
    return `+33 ${num[0]} ${num.slice(1,3)} ${num.slice(3,5)} ${num.slice(5,7)} ${num.slice(7,9)}`;
  }

  // Si commence par 0 et contient 10 chiffres => on convertit vers +33
  const matchZero = cleaned.match(/^0(\d{9})$/);
  if (matchZero) {
    const num = matchZero[1];
    return `+33 ${num[0]} ${num.slice(1,3)} ${num.slice(3,5)} ${num.slice(5,7)} ${num.slice(7,9)}`;
  }

  // Si c'est d√©j√† 9 chiffres sans +33 et commence par 6 ou 7 (mobile)
  const matchMobile = cleaned.match(/^([67]\d{8})$/);
  if (matchMobile) {
    const num = matchMobile[1];
    return `+33 ${num[0]} ${num.slice(1,3)} ${num.slice(3,5)} ${num.slice(5,7)} ${num.slice(7,9)}`;
  }

  // Si c'est 9 chiffres commen√ßant par 1-5 (fixe)
  const matchFixe = cleaned.match(/^([1-5]\d{8})$/);
  if (matchFixe) {
    const num = matchFixe[1];
    return `+33 ${num[0]} ${num.slice(1,3)} ${num.slice(3,5)} ${num.slice(5,7)} ${num.slice(7,9)}`;
  }

  // Si commence d√©j√† par +33 mais mal format√© (avec 0 suppl√©mentaire)
  const matchPlusVariant = cleaned.match(/^\+33(.+)$/);
  if (matchPlusVariant) {
    let numPart = matchPlusVariant[1];
    
    // Si le num√©ro commence par 0, le supprimer
    if (numPart.startsWith('0')) {
      numPart = numPart.substring(1);
    }
    
    if (numPart.length === 9) {
      return `+33 ${numPart[0]} ${numPart.slice(1,3)} ${numPart.slice(3,5)} ${numPart.slice(5,7)} ${numPart.slice(7,9)}`;
    }
  }

  // Sinon retourner tel quel
  return phoneStr;
};

// Load contacts from localStorage
export const loadContacts = (): Contact[] => {
  try {
    const stored = localStorage.getItem('dimiCallContacts');
    if (stored) {
      return JSON.parse(stored);
    }
  } catch (error) {
    console.error('Error loading contacts from localStorage:', error);
  }
  return [];
};

// Save contacts to localStorage
export const saveContacts = (contacts: Contact[]): void => {
  try {
    localStorage.setItem('dimiCallContacts', JSON.stringify(contacts));
  } catch (error) {
    console.error('Error saving contacts to localStorage:', error);
  }
};

// Load call states from localStorage
export const loadCallStates = (): Record<string, { isCalling?: boolean; hasBeenCalled?: boolean }> => {
  try {
    const stored = localStorage.getItem('dimiCallStates');
    if (stored) {
      return JSON.parse(stored);
    }
  } catch (error) {
    console.error('Error loading call states from localStorage:', error);
  }
  return {};
};

// Save call states to localStorage
export const saveCallStates = (states: Record<string, { isCalling?: boolean; hasBeenCalled?: boolean }>): void => {
  try {
    localStorage.setItem('dimiCallStates', JSON.stringify(states));
  } catch (error) {
    console.error('Error saving call states to localStorage:', error);
  }
};

// Normalize header names for CSV import
// Fonction pour normaliser les cha√Ænes (supprimer accents, espaces, etc.)
const removeAccents = (str: string): string => {
  return str.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
};

const normalizeHeader = (header: string): string => {
  // Nettoyage initial : supprimer espaces de d√©but/fin, convertir en minuscules, supprimer accents
  const cleaned = removeAccents(header.trim().toLowerCase());
  
  // Mapping √©tendu avec toutes les variantes possibles
  const mapping: Record<string, string> = {
    // PR√âNOM - toutes variantes
    'pr√©nom': 'prenom',
    'prenom': 'prenom',
    'firstname': 'prenom',
    'first_name': 'prenom',
    'first name': 'prenom',
    'fname': 'prenom',
    
    // NOM - toutes variantes  
    'nom': 'nom',
    'lastname': 'nom',
    'last_name': 'nom',
    'last name': 'nom',
    'lname': 'nom',
    'surname': 'nom',
    'family_name': 'nom',
    
    // T√âL√âPHONE - toutes variantes
    't√©l√©phone': 'telephone',
    'telephone': 'telephone',
    'phone': 'telephone',
    'numero': 'telephone',
    'num√©ro': 'telephone',
    'number': 'telephone',
    'tel': 'telephone',
    'mobile': 'telephone',
    'gsm': 'telephone',
    'portable': 'telephone',
    'cellulaire': 'telephone',
    't√©l': 'telephone',
    
    // EMAIL - toutes variantes
    'email': 'email',
    'e-mail': 'email',
    'mail': 'email',
    'm√©l': 'email',
    'mel': 'email',
    'courriel': 'email',
    'adresse_mail': 'email',
    'adresse mail': 'email',
    'email_address': 'email',
    
    // SOURCE/√âCOLE - toutes variantes
    '√©cole': 'source',
    'ecole': 'source',
    'source': 'source',
    'origin': 'source',
    'origine': 'source',
    'etablissement': 'source',
    '√©tablissement': 'source',
    'institution': 'source',
    'university': 'source',
    'universite': 'source',
    'universit√©': 'source',
    'school': 'source',
    
    // STATUT - toutes variantes
    'statut': 'statut',
    'status': 'statut',
    '√©tat': 'statut',
    'etat': 'statut',
    'state': 'statut',
    
    // COMMENTAIRE - toutes variantes
    'commentaire': 'commentaire',
    'commentaires': 'commentaire',
    'comment': 'commentaire',
    'comments': 'commentaire',
    'note': 'commentaire',
    'notes': 'commentaire',
    'remarque': 'commentaire',
    'remarques': 'commentaire',
    'observation': 'commentaire',
    'observations': 'commentaire',
  };
  
  // Recherche directe
  if (mapping[cleaned]) {
    return mapping[cleaned];
  }
  
  // Si aucun mapping trouv√©, retourner le header nettoy√©
  console.warn(`‚ö†Ô∏è En-t√™te non reconnu: "${header}" ‚Üí "${cleaned}"`);
  return cleaned;
};

// Fonction pour valider et analyser les en-t√™tes
const analyzeHeaders = (headers: string[]): { 
  valid: boolean; 
  warnings: string[]; 
  suggestions: string[];
  mappings: Record<string, string>;
} => {
  const warnings: string[] = [];
  const suggestions: string[] = [];
  const mappings: Record<string, string> = {};
  
  const requiredFields = ['prenom', 'nom', 'telephone'];
  const foundFields: Set<string> = new Set();
  
  headers.forEach(header => {
    const normalized = normalizeHeader(header);
    mappings[header] = normalized;
    
    if (requiredFields.includes(normalized)) {
      foundFields.add(normalized);
    }
    
    // V√©rifications sp√©cifiques
    if (header !== header.trim()) {
      warnings.push(`‚ö†Ô∏è En-t√™te avec espaces: "${header}"`);
    }
    
    if (normalized === removeAccents(header.trim().toLowerCase()) && header !== normalized) {
      suggestions.push(`üí° "${header}" sera normalis√© en "${normalized}"`);
    }
  });
  
  // V√©rifier les champs obligatoires
  const missingFields = requiredFields.filter(field => !foundFields.has(field));
  if (missingFields.length > 0) {
    warnings.push(`‚ùå Champs obligatoires manquants: ${missingFields.join(', ')}`);
    
    // Suggestions bas√©es sur les en-t√™tes existants
    missingFields.forEach(missing => {
      const similarHeaders = headers.filter(h => 
        removeAccents(h.toLowerCase()).includes(missing.substring(0, 3))
      );
      if (similarHeaders.length > 0) {
        suggestions.push(`üí° Pour "${missing}", avez-vous voulu dire: ${similarHeaders.join(', ')} ?`);
      }
    });
  }
  
  return {
    valid: missingFields.length === 0,
    warnings,
    suggestions,
    mappings
  };
};

// Fonction pour d√©tecter le d√©limiteur d'un fichier
const detectDelimiter = async (file: File): Promise<string> => {
  return new Promise((resolve) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      const text = e.target?.result as string;
      const firstLine = text.split('\n')[0];
      
      // Compter les d√©limiteurs potentiels
      const tabCount = (firstLine.match(/\t/g) || []).length;
      const commaCount = (firstLine.match(/,/g) || []).length;
      const semicolonCount = (firstLine.match(/;/g) || []).length;
      
      // D√©terminer le d√©limiteur le plus probable
      if (tabCount > commaCount && tabCount > semicolonCount) {
        resolve('\t'); // TSV
      } else if (semicolonCount > commaCount) {
        resolve(';'); // CSV europ√©en
      } else {
        resolve(','); // CSV standard
      }
    };
    reader.onerror = () => resolve(','); // Par d√©faut CSV
    // Lire seulement les premiers 1024 caract√®res pour la d√©tection
    reader.readAsText(file.slice(0, 1024));
  });
};

// Import contacts from file (CSV or Excel)
export const importContactsFromFile = async (file: File): Promise<Contact[]> => {
  // üîç V√©rification pr√©liminaire de la taille du fichier
  const fileSizeInMB = file.size / (1024 * 1024);
  console.log(`üìÑ Traitement du fichier: ${file.name} (${fileSizeInMB.toFixed(1)}MB)`);
  
  if (fileSizeInMB > 50) {
    throw new Error(`‚ùå Fichier trop volumineux (${fileSizeInMB.toFixed(1)}MB). Limite: 50MB pour √©viter les crashes.`);
  }
  
  if (fileSizeInMB > 20) {
    console.warn(`‚ö†Ô∏è Fichier volumineux (${fileSizeInMB.toFixed(1)}MB), traitement avec pr√©cautions...`);
  }
  
  const fileExtension = file.name.split('.').pop()?.toLowerCase();
  
  if (fileExtension === 'csv' || fileExtension === 'tsv') {
    // D√©tecter automatiquement le d√©limiteur
    const delimiter = await detectDelimiter(file);
    console.log(`D√©limiteur d√©tect√©: "${delimiter === '\t' ? 'TAB' : delimiter}"`);
    
    return new Promise((resolve, reject) => {
      const contacts: Contact[] = [];
      let rowIndex = 0;
      let headersValidated = false;
      
      Papa.parse(file, {
        header: true,
        skipEmptyLines: true,
        delimiter: delimiter, // Utiliser le d√©limiteur d√©tect√©
        chunkSize: 1024 * 512, // 512KB chunks pour plus de stabilit√©
        chunk: (results: any, parser: any) => {
          // Validation des en-t√™tes sur le premier chunk seulement
          if (!headersValidated && results.meta && results.meta.fields) {
            const headerAnalysis = analyzeHeaders(results.meta.fields);
            
            console.log('üìä Analyse des en-t√™tes:');
            console.log('En-t√™tes d√©tect√©s:', results.meta.fields);
            console.log('Mappings:', headerAnalysis.mappings);
            
            if (headerAnalysis.warnings.length > 0) {
              console.warn('‚ö†Ô∏è Avertissements:', headerAnalysis.warnings);
            }
            
            if (headerAnalysis.suggestions.length > 0) {
              console.log('üí° Suggestions:', headerAnalysis.suggestions);
            }
            
            headersValidated = true;
          }
          
          // Traitement par chunks pour √©viter le blocage de l'UI
          try {
            const normalizedHeaders = results.meta.fields.map(normalizeHeader);

            const chunkContacts = results.data.map((row: any, index: number) => {
              rowIndex++;
              const contactData: Partial<Contact> = {
                id: uuidv4(),
                numeroLigne: rowIndex,
              };

              (results.meta.fields || []).forEach((originalHeader: string, i: number) => {
                const normalized = normalizedHeaders[i];
                if (normalized) {
                  (contactData as any)[normalized] = row[originalHeader];
                }
              });

              // Format phone number after mapping
              if (contactData.telephone) {
                contactData.telephone = formatPhoneNumber(contactData.telephone);
              }

              return contactData as Contact;
            });
            
            contacts.push(...chunkContacts);
            
            // Donner une pause √† l'UI entre les chunks
            if (contacts.length % 500 === 0) {
              setTimeout(() => {
                // Continue parsing
              }, 5);
            }
          } catch (error) {
            parser.abort();
            reject(error);
          }
        },
        complete: (results: any) => {
          try {
            console.log(`Import CSV termin√©: ${contacts.length} contacts trait√©s`);
            resolve(contacts);
          } catch (error) {
            reject(error);
          }
        },
        error: (error: any) => {
          reject(error);
        },
        transformHeader: (header: string) => normalizeHeader(header.trim()),
      });
    });
  } else if (fileExtension === 'xlsx' || fileExtension === 'xls') {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = async (e) => {
        try {
          console.log(`üìä Lecture du fichier Excel en cours...`);
          const data = new Uint8Array(e.target?.result as ArrayBuffer);
          
          // üõ°Ô∏è Options optimis√©es pour les gros fichiers
          const workbook = XLSX.read(data, { 
            type: 'array',
            dense: fileSizeInMB > 10, // Mode dense pour les gros fichiers
            cellText: false, // √âviter la conversion automatique de texte
            cellNF: false, // D√©sactiver le formatage des nombres
            cellHTML: false, // D√©sactiver le HTML
            cellFormula: false, // Ignorer les formules
            cellDates: false, // √âviter la conversion de dates automatique
            sheetStubs: false // Ignorer les cellules vides
          });
          
          const sheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[sheetName];
          
          // üìÑ Traitement Excel optimis√© avec gestion progressive
          const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, blankrows: false, defval: "" });
          
          if (jsonData.length === 0) {
            throw new Error('Le fichier Excel est vide');
          }
          
          // 1. Extraire les en-t√™tes originaux de la premi√®re ligne
          const originalHeaders = (jsonData[0] as string[]).map(h => h ? h.toString().trim() : '');
          const normalizedHeaders = originalHeaders.map(h => normalizeHeader(h));
          const contacts: Contact[] = [];
          
          // üìä Validation des en-t√™tes pour Excel
          const headerAnalysis = analyzeHeaders(normalizedHeaders);
          console.log('üìä Analyse des en-t√™tes Excel:');
          console.log('En-t√™tes d√©tect√©s:', originalHeaders);
          console.log('Mappings:', headerAnalysis.mappings);
          
          if (headerAnalysis.warnings.length > 0) {
            console.warn('‚ö†Ô∏è Avertissements:', headerAnalysis.warnings);
          }
          
          // üöÄ Traitement optimis√© par chunks avec gestion m√©moire
          const chunkSize = fileSizeInMB > 20 ? 50 : fileSizeInMB > 10 ? 100 : 250; // Plus petits chunks pour gros fichiers
          const totalRows = jsonData.length - 1;
          let processedRows = 0;
          
          console.log(`‚öôÔ∏è Traitement par chunks de ${chunkSize} lignes...`);
          
          for (let i = 1; i < jsonData.length; i += chunkSize) {
            const chunk = jsonData.slice(i, i + chunkSize);
            const chunkContacts: Contact[] = [];
            
            for (let j = 0; j < chunk.length; j++) {
              const row = chunk[j] as any[];
              if (!row || row.length === 0) continue; // Ignorer les lignes vides
              
              const contactData: Partial<Contact> = {
                id: uuidv4(),
                numeroLigne: i + j,
              };

              // Mapper chaque colonne en utilisant l'en-t√™te original pour r√©cup√©rer la valeur
              // et l'en-t√™te normalis√© pour l'assigner au bon champ
              originalHeaders.forEach((originalHeader, index) => {
                const normalizedField = normalizedHeaders[index];
                if (normalizedField && row[index] !== undefined && row[index] !== null) {
                  const cellValue = row[index].toString().trim();
                  if (cellValue) {
                    (contactData as any)[normalizedField] = cellValue;
                  }
                }
              });

              // Format phone number after mapping
              if (contactData.telephone) {
                contactData.telephone = formatPhoneNumber(String(contactData.telephone));
              }

              // Set default status if not provided
              if (!contactData.statut) {
                contactData.statut = ContactStatus.NonDefini;
              }

              // Ne pas ajouter les contacts compl√®tement vides
              if (contactData.prenom || contactData.nom || contactData.telephone || contactData.email) {
                chunkContacts.push(contactData as Contact);
              }
            }
            
            // Ajouter le chunk trait√© aux contacts globaux
            contacts.push(...chunkContacts);
            processedRows += chunk.length;
            
            // üîÑ Pause progressive pour √©viter le blocage de l'UI et la saturation m√©moire
            const pauseDuration = fileSizeInMB > 20 ? 25 : fileSizeInMB > 10 ? 15 : 10;
            if (i % (chunkSize * 3) === 0) {
              console.log(`‚è≥ Progression: ${Math.round((processedRows / totalRows) * 100)}% (${contacts.length} contacts valides)`);
              await new Promise(resolve => setTimeout(resolve, pauseDuration));
              
              // üßπ Forcer le garbage collection si possible
              if ((window as any).gc) {
                (window as any).gc();
              }
            }
          }
          
          resolve(contacts);
        } catch (error) {
          reject(error);
        }
      };
      reader.onerror = () => reject(new Error('Erreur lors de la lecture du fichier'));
      reader.readAsArrayBuffer(file);
    });
  } else {
    throw new Error('Format de fichier non support√©. Utilisez CSV ou Excel (.xlsx, .xls)');
  }
};

// Export contacts to file
export const exportContactsToFile = (contacts: Contact[], format: 'csv' | 'xlsx'): void => {
  const headers = [
    'Pr√©nom', 'Nom', 'T√©l√©phone', 'Mail', '√âcole/Source', 'Statut',
    'Commentaire', 'Date Rappel', 'Heure Rappel', 'Date RDV', 'Heure RDV',
    'Date Appel', 'Heure Appel', 'Dur√©e Appel'
  ];

  const data = contacts.map(contact => [
    contact.prenom,
    contact.nom,
    contact.telephone,
    contact.email,
    contact.source,
    contact.statut,
    contact.commentaire,
    contact.dateRappel,
    contact.heureRappel,
    contact.dateRDV,
    contact.heureRDV,
    contact.dateAppel,
    contact.heureAppel,
    contact.dureeAppel
  ]);

  // Generate filename with format: DimiCall_YYYY-MM-DD-HH-MM-SS
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  const hours = String(now.getHours()).padStart(2, '0');
  const minutes = String(now.getMinutes()).padStart(2, '0');
  const seconds = String(now.getSeconds()).padStart(2, '0');
  const timestamp = `${year}-${month}-${day}-${hours}-${minutes}-${seconds}`;
  
  if (format === 'csv') {
    const csvContent = Papa.unparse([headers, ...data]);
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `DimiCall_${timestamp}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  } else if (format === 'xlsx') {
    const worksheet = XLSX.utils.aoa_to_sheet([headers, ...data]);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Contacts');
    XLSX.writeFile(workbook, `DimiCall_${timestamp}.xlsx`);
  }
};

export const generateGmailComposeUrl = (
  contact: Contact,
  emailType: EmailType,
  civility: Civility,
  signatureName: string = ""
): string => {
  const emailTo = contact.email;
  const contactLastName = contact.nom || '';
  const titre = civility === Civility.Madame ? "Madame" : "Monsieur";
  const params = new URLSearchParams({ to: emailTo });
  
  // Charger les templates personnalis√©s
  const STORAGE_KEY = 'dimicall_email_templates';
  let subject = "";
  let bodyTemplate = "";
  
  // Templates par d√©faut
  const defaultTemplates = {
    [EmailType.PremierContact]: {
      subject: "Arcanis Conseil - Premier Contact",
      body: "Bonjour {titre} {nom},\n\nPour resituer mon appel, je suis g√©rant priv√© au sein du cabinet de gestion de patrimoine Arcanis Conseil. Je vous envoie l'adresse de notre site web que vous puissiez en savoir d'avantage : https://arcanis-conseil.fr\n\nLe site est avant tout une vitrine, le mieux est de m'appeler si vous souhaitez davantage d'informations ou de prendre un cr√©neau de 30 minutes dans mon agenda via ce lien : https://cal.com/dimitri-morel-arcanis-conseil/audit-patrimonial?overlayCalendar=true\n\nBien √† vous,"
    },
    [EmailType.D0Visio]: {
      subject: "Confirmation rendez-vous visio - Arcanis Conseil",
      body: "Bonjour {titre} {nom}, merci pour votre temps lors de notre √©change t√©l√©phonique. \n\nSuite √† notre appel, je vous confirme {rdv} en visio.\n\nPour rappel, notre entretien durera une trentaine de minutes. Le but est de vous pr√©senter plus en d√©tail Arcanis Conseil, d'effectuer ensemble l'√©tat des lieux de votre situation patrimoniale (revenus, patrimoine immobilier, √©pargne constitu√©e etc.), puis de vous donner un diagnostic de vos leviers. Notre m√©tier est de vous apporter un conseil pertinent et personnalis√© sur l'optimisation de votre patrimoine.\n\nJe vous invite √† visiter notre site internet pour de plus amples renseignements avant le d√©but de notre √©change : www.arcanis-conseil.fr\n\nN'h√©sitez pas √† revenir vers moi en cas de question ou d'un besoin suppl√©mentaire d'information.\n\nBien cordialement"
    },
    [EmailType.R0Interne]: {
      subject: "Confirmation rendez-vous pr√©sentiel - Arcanis Conseil",
      body: "Bonjour {titre} {nom}, merci pour votre temps lors de notre √©change t√©l√©phonique. \n\nSuite √† notre appel, je vous confirme {rdv} dans nos locaux au 22 rue la Bo√©tie, 75008 Paris.\n\nPour rappel, notre entretien durera une trentaine de minutes. Le but est de vous pr√©senter plus en d√©tail Arcanis Conseil, d'effectuer ensemble l'√©tat des lieux de votre situation patrimoniale (revenus, patrimoine immobilier, √©pargne constitu√©e etc.), puis de vous donner un diagnostic de vos leviers. Notre m√©tier est de vous apporter un conseil pertinent et personnalis√© sur l'optimisation de votre patrimoine.\n\nJe vous invite √† visiter notre site internet pour de plus amples renseignements avant le d√©but de notre √©change : www.arcanis-conseil.fr\n\nN'h√©sitez pas √† revenir vers moi en cas de question ou d'un besoin suppl√©mentaire d'information.\n\nBien cordialement"
    },
    [EmailType.R0Externe]: {
      subject: "Confirmation rendez-vous pr√©sentiel - Arcanis Conseil",
      body: "Bonjour {titre} {nom}, merci pour votre temps lors de notre √©change t√©l√©phonique. \n\nSuite √† notre appel, je vous confirme {rdv} √† {adresse}.\n\nPour rappel, notre entretien durera une trentaine de minutes. Le but est de vous pr√©senter plus en d√©tail Arcanis Conseil, d'effectuer ensemble l'√©tat des lieux de votre situation patrimoniale (revenus, patrimoine immobilier, √©pargne constitu√©e etc.), puis de vous donner un diagnostic de vos leviers. Notre m√©tier est de vous apporter un conseil pertinent et personnalis√© sur l'optimisation de votre patrimoine.\n\nJe vous invite √† visiter notre site internet pour de plus amples renseignements avant le d√©but de notre √©change : www.arcanis-conseil.fr\n\nN'h√©sitez pas √† revenir vers moi en cas de question ou d'un besoin suppl√©mentaire d'information.\n\nBien cordialement"
    }
  };

  // Essayer de charger les templates personnalis√©s
  let templates = defaultTemplates;
  let signature = signatureName || '';
  
  try {
    const saved = localStorage.getItem(STORAGE_KEY);
    if (saved) {
      const data = JSON.parse(saved);
      if (data.templates) {
        templates = data.templates;
      }
      if (data.signature) {
        signature = data.signature;
      }
    }
  } catch (error) {
    console.error('Erreur lors du chargement des templates personnalis√©s:', error);
  }

  // R√©cup√©rer le template pour le type d'email
  const template = templates[emailType];
  if (template) {
    subject = template.subject;
    bodyTemplate = template.body;
  }

  // Gestion de la date et l'heure du RDV
  let rdvDetails = "notre entretien du [DATE ET HEURE]";
  if (contact.dateRDV && contact.heureRDV) {
    try {
      const date = new Date(`${contact.dateRDV}T${contact.heureRDV}`);
      if (!isNaN(date.getTime())) {
        const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
        const formattedDate = new Intl.DateTimeFormat('fr-FR', dateOptions).format(date);
        rdvDetails = `notre entretien du ${formattedDate} √† ${contact.heureRDV}`;
      }
    } catch (e) {
      console.error("Erreur de formatage de la date du RDV", e);
    }
  }

  // Remplacement des variables dans le template
  let finalBody = bodyTemplate
    .replace(/{titre}/g, titre)
    .replace(/{nom}/g, contactLastName)
    .replace(/{signature}/g, signature)
    .replace(/{rdv}/g, rdvDetails)
    .replace(/{adresse}/g, '[ADRESSE CLIENT]')
    .replace(/\[DATE ET HEURE\]/g, 'date et heure √† d√©terminer');

  params.set('su', subject);
  params.set('body', finalBody);

  return `https://mail.google.com/mail/?view=cm&fs=1&${params.toString()}`;
};

/**
 * Sauvegarde de la table import√©e avec protection contre la saturation
 */
export const saveImportedTable = (contacts: Contact[], metadata?: { 
  fileName?: string; 
  importDate?: string; 
  source?: 'csv' | 'xlsx' | 'supabase';
  totalRows?: number;
}): void => {
  try {
    // üõ°Ô∏è Protection contre les gros fichiers
    const maxContacts = 5000; // Limite √† 5000 contacts pour √©viter la saturation
    const limitedContacts = contacts.length > maxContacts ? contacts.slice(0, maxContacts) : contacts;
    
    const dataToSave = {
      contacts: limitedContacts,
      metadata: {
        fileName: metadata?.fileName || 'Table import√©e',
        importDate: metadata?.importDate || new Date().toISOString(),
        source: metadata?.source || 'csv',
        totalRows: metadata?.totalRows || contacts.length,
        truncated: contacts.length > maxContacts,
        truncatedFrom: contacts.length,
        version: '1.0'
      }
    };
    
    // üîç V√©rification de la taille avant sauvegarde
    const serialized = JSON.stringify(dataToSave);
    const sizeInMB = new Blob([serialized]).size / (1024 * 1024);
    
    if (sizeInMB > 4) { // Limite √† 4MB pour √™tre s√ªr
      console.warn(`‚ö†Ô∏è Fichier trop volumineux (${sizeInMB.toFixed(1)}MB), sauvegarde des m√©tadonn√©es uniquement`);
      
      // Sauvegarde seulement les m√©tadonn√©es pour les gros fichiers
      const metadataOnly = {
        contacts: [], // Tableau vide
        metadata: {
          ...dataToSave.metadata,
          metadataOnly: true,
          reason: 'Fichier trop volumineux pour localStorage'
        }
      };
      
      localStorage.setItem(IMPORTED_TABLE_KEY, JSON.stringify(metadataOnly));
      console.log(`üíæ M√©tadonn√©es sauvegard√©es uniquement (fichier ${sizeInMB.toFixed(1)}MB trop volumineux)`);
      return;
    }
    
    localStorage.setItem(IMPORTED_TABLE_KEY, JSON.stringify(dataToSave));
    
    if (contacts.length > maxContacts) {
      console.log(`üíæ Table import√©e sauvegard√©e: ${limitedContacts.length}/${contacts.length} contacts (tronqu√© pour √©conomiser l'espace)`);
    } else {
      console.log(`üíæ Table import√©e sauvegard√©e: ${contacts.length} contacts`);
    }
    
  } catch (error) {
    if (error instanceof DOMException && error.name === 'QuotaExceededError') {
      console.error('‚ùå LocalStorage satur√© ! Sauvegarde des m√©tadonn√©es uniquement...');
      
      // Tentative de sauvegarde des m√©tadonn√©es uniquement
      try {
        const metadataOnly = {
          contacts: [],
          metadata: {
            fileName: metadata?.fileName || 'Table import√©e',
            importDate: metadata?.importDate || new Date().toISOString(),
            source: metadata?.source || 'csv',
            totalRows: metadata?.totalRows || contacts.length,
            metadataOnly: true,
            reason: 'Quota localStorage d√©pass√©',
            version: '1.0'
          }
        };
        
        // Nettoyer d'abord l'ancien contenu
        clearImportedTable();
        localStorage.setItem(IMPORTED_TABLE_KEY, JSON.stringify(metadataOnly));
        console.log(`üíæ M√©tadonn√©es sauvegard√©es apr√®s nettoyage (${contacts.length} contacts non sauvegard√©s)`);
      } catch (secondaryError) {
        console.error('‚ùå Impossible de sauvegarder m√™me les m√©tadonn√©es:', secondaryError);
      }
    } else {
      console.error('‚ùå Erreur lors de la sauvegarde de la table import√©e:', error);
    }
  }
};

/**
 * Chargement de la table import√©e sauvegard√©e avec gestion des m√©tadonn√©es seules
 */
export const loadImportedTable = (): { 
  contacts: Contact[]; 
  metadata?: { 
    fileName: string; 
    importDate: string; 
    source: 'csv' | 'xlsx' | 'supabase';
    totalRows: number;
    version: string;
    truncated?: boolean;
    truncatedFrom?: number;
    metadataOnly?: boolean;
    reason?: string;
  } 
} | null => {
  try {
    const saved = localStorage.getItem(IMPORTED_TABLE_KEY);
    if (!saved) return null;
    
    const parsed = JSON.parse(saved);
    
    // Validation basique des donn√©es
    if (!parsed.contacts || !Array.isArray(parsed.contacts)) {
      console.warn('‚ö†Ô∏è Format de table import√©e invalide, suppression...');
      clearImportedTable();
      return null;
    }
    
    // üìä Gestion des diff√©rents cas de sauvegarde
    if (parsed.metadata?.metadataOnly) {
      console.log(`üìÇ M√©tadonn√©es charg√©es (${parsed.metadata.totalRows} contacts originaux - ${parsed.metadata.reason})`);
    } else if (parsed.metadata?.truncated) {
      console.log(`üìÇ Table tronqu√©e charg√©e: ${parsed.contacts.length}/${parsed.metadata.truncatedFrom} contacts (${parsed.metadata?.fileName || 'Sans nom'})`);
    } else {
      console.log(`üìÇ Table import√©e charg√©e: ${parsed.contacts.length} contacts (${parsed.metadata?.fileName || 'Sans nom'})`);
    }
    
    return parsed;
  } catch (error) {
    console.error('‚ùå Erreur lors du chargement de la table import√©e:', error);
    clearImportedTable();
    return null;
  }
};

/**
 * Suppression de la table import√©e sauvegard√©e
 */
export const clearImportedTable = (): void => {
  try {
    localStorage.removeItem(IMPORTED_TABLE_KEY);
    console.log('üóëÔ∏è Table import√©e supprim√©e');
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression de la table import√©e:', error);
  }
};

/**
 * V√©rification de l'existence d'une table import√©e
 */
export const hasImportedTable = (): boolean => {
  try {
    const saved = localStorage.getItem(IMPORTED_TABLE_KEY);
    return saved !== null && saved !== '';
  } catch {
    return false;
  }
};

/**
 * Nettoyage de la m√©moire et optimisation pour les gros fichiers
 */
export const optimizeMemoryUsage = (): void => {
  try {
    // üßπ Forcer le garbage collection si disponible (mode d√©veloppement)
    if ((window as any).gc) {
      (window as any).gc();
      console.log('üßπ Garbage collection forc√©');
    }
    
    // üìä Afficher les informations m√©moire si disponible
    if ((performance as any).memory) {
      const memory = (performance as any).memory;
      const used = Math.round(memory.usedJSHeapSize / 1048576);
      const total = Math.round(memory.totalJSHeapSize / 1048576);
      const limit = Math.round(memory.jsHeapSizeLimit / 1048576);
      
      console.log(`üíæ M√©moire: ${used}MB utilis√©s / ${total}MB total (limite: ${limit}MB)`);
      
      // ‚ö†Ô∏è Avertissement si proche de la limite
      if (used / limit > 0.8) {
        console.warn(`‚ö†Ô∏è Utilisation m√©moire √©lev√©e: ${Math.round((used / limit) * 100)}%`);
      }
    }
  } catch (error) {
    console.log('‚ÑπÔ∏è Informations m√©moire non disponibles');
  }
};

/**
 * V√©rification de l'espace disponible dans localStorage
 */
export const checkStorageQuota = (): { available: boolean; usedMB: number; percentage: number } => {
  try {
    // Estimer l'utilisation actuelle du localStorage
    let totalSize = 0;
    for (let key in localStorage) {
      if (localStorage.hasOwnProperty(key)) {
        totalSize += localStorage[key].length + key.length;
      }
    }
    
    const usedMB = totalSize / (1024 * 1024);
    const estimatedLimit = 10; // ~10MB limite typique
    const percentage = (usedMB / estimatedLimit) * 100;
    
    console.log(`üíΩ LocalStorage: ${usedMB.toFixed(1)}MB utilis√©s (~${percentage.toFixed(0)}%)`);
    
    return {
      available: percentage < 80, // Consid√©rer comme disponible si moins de 80%
      usedMB: usedMB,
      percentage: percentage
    };
  } catch (error) {
    console.warn('‚ö†Ô∏è Impossible de v√©rifier le quota localStorage');
    return { available: false, usedMB: 0, percentage: 100 };
  }
};

/**
 * Obtenir les m√©tadonn√©es de la table import√©e sans charger les donn√©es
 */
export const getImportedTableMetadata = (): { 
  fileName: string; 
  importDate: string; 
  source: 'csv' | 'xlsx' | 'supabase';
  totalRows: number;
  version: string;
} | null => {
  try {
    const saved = localStorage.getItem(IMPORTED_TABLE_KEY);
    if (!saved) return null;
    
    const parsed = JSON.parse(saved);
    return parsed.metadata || null;
  } catch {
    return null;
  }
};

/**
 * G√©n√®re une URL Google Calendar pour cr√©er un √©v√©nement de rappel
 * @param contact - Le contact pour lequel cr√©er le rappel
 * @param date - La date du rappel (YYYY-MM-DD)
 * @param time - L'heure du rappel (HH:mm)
 * @param isRendezVous - Si true, g√©n√®re un titre de rendez-vous au lieu de rappel
 * @returns L'URL Google Calendar pr√©-remplie
 */
export function generateGoogleCalendarUrl(contact: Contact, date: string, time: string, isRendezVous: boolean = false): string {
  // Formater la date et l'heure pour Google Calendar
  const dateTime = new Date(`${date}T${time}`);
  const endDateTime = new Date(dateTime.getTime() + 30 * 60 * 1000); // +30 minutes
  
  // Formater les dates pour Google Calendar (format ISO)
  const startDate = dateTime.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';
  const endDate = endDateTime.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';
  
  // Construire le titre de l'√©v√©nement
  const eventTitle = isRendezVous 
    ? `Rendez-vous - ${contact.prenom} ${contact.nom}`
    : `Rappeler - ${contact.prenom} ${contact.nom}`;
  
  // Construire la description avec toutes les informations du contact
  const contactInfo: string[] = [];
  
  if (contact.telephone) {
    contactInfo.push(`üìû T√©l√©phone: ${contact.telephone}`);
  }
  
  if (contact.email) {
    contactInfo.push(`üìß Email: ${contact.email}`);
  }
  
  if (contact.source) {
    contactInfo.push(`üìã Source: ${contact.source}`);
  }
  
  if (contact.statut) {
    contactInfo.push(`üè∑Ô∏è Statut: ${contact.statut}`);
  }
  
  if (contact.commentaire) {
    contactInfo.push(`üí¨ Commentaire: ${contact.commentaire}`);
  }
  
  if (contact.sexe) {
    contactInfo.push(`üë§ Sexe: ${contact.sexe}`);
  }
  
  if (contact.don) {
    contactInfo.push(`üí∞ Don: ${contact.don}`);
  }
  
  if (contact.qualite) {
    contactInfo.push(`‚≠ê Qualit√©: ${contact.qualite}`);
  }
  
  if (contact.type) {
    contactInfo.push(`üìù Type: ${contact.type}`);
  }
  
  if (contact.statutAppel) {
    contactInfo.push(`üìû Statut appel: ${contact.statutAppel}`);
  }
  
  if (contact.statutRDV) {
    contactInfo.push(`üìÖ Statut RDV: ${contact.statutRDV}`);
  }
  
  if (contact.commentaireRDV) {
    contactInfo.push(`üìù Commentaire RDV: ${contact.commentaireRDV}`);
  }
  
  const eventType = isRendezVous ? 'Rendez-vous' : 'Rappeler';
  const description = contactInfo.length > 0 
    ? `${eventType} avec ${contact.prenom} ${contact.nom}\n\nInformations du contact:\n${contactInfo.join('\n')}`
    : `${eventType} avec ${contact.prenom} ${contact.nom}`;
  
  // Construire l'URL Google Calendar
  const baseUrl = 'https://calendar.google.com/calendar/render';
  const params = new URLSearchParams({
    action: 'TEMPLATE',
    text: eventTitle,
    dates: `${startDate}/${endDate}`,
    details: description,
    sf: 'true',
    output: 'xml'
  });
  
  return `${baseUrl}?${params.toString()}`;
}

