import './index.css';
import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { Theme, Contact, CallState, CallStates, ContactStatus, Civility, EmailType } from './types';
import { APP_NAME, COLUMN_HEADERS, CONTACT_DATA_KEYS, headerIcons } from './constants';
import { ContactTable, ContactTableRef } from './components/ContactTable';
import { EmailDialog, RappelDialog, RendezVousDialog, QualificationDialog, GenericInfoDialog } from './components/Dialogs';


import { TitleBar } from './components/TitleBar';
import { 
  loadContacts, 
  saveContacts, 
  importContactsFromFile, 
  exportContactsToFile, 
  loadCallStates, 
  saveCallStates,
  saveImportedTable,
  loadImportedTable,
  clearImportedTable,
  hasImportedTable,
  getImportedTableMetadata,
  formatPhoneNumber,
  generateGmailComposeUrl
} from './services/dataService';

import { useAdb } from './hooks/useAdb';
import { useAutoUpdate } from './hooks/useAutoUpdate';
import { v4 as uuidv4 } from 'uuid';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { cn, searchLinkedIn, searchGoogle } from './lib/utils';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
  DropdownMenuCheckboxItem
} from "@/components/ui/dropdown-menu";
import {
  Phone, Mail, MessageSquare, Bell, Calendar, CalendarSearch, FileCheck, Linkedin, Globe, 
  Download, Keyboard, RefreshCw, Sun, Moon, Columns, X, Filter, Infinity, 
  Upload, Smartphone, Wifi, WifiOff, Loader2, FileSpreadsheet, Settings2, Eye
} from 'lucide-react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { DropZoneOverlay } from './components/Common';
import { CalendarModal } from './components/CalendarModal';
import { AuthModal } from './components/AuthModal';
import { UserProfileCard } from './components/UserProfileCard';
import { useSupabaseAuth } from './lib/auth-client';

import { ShortcutConfigDialog } from './components/ShortcutConfigDialog';
import { ShortcutIndicator } from './components/ShortcutIndicator';
import { shortcutService } from './services/shortcutService';
import { SettingsDialog, getSavedColumnConfig } from './components/SettingsDialog';
import { adbService } from './services/adbService'; // Importer l'instance


// Composant DonutChart moderne
const DonutChart: React.FC<{ progress: number; size?: number }> = ({ progress, size = 32 }) => {
  const radius = (size - 4) / 2;
  const circumference = 2 * Math.PI * radius;
  const strokeDashoffset = circumference - (progress / 100) * circumference;
  
  return (
    <div className="relative inline-flex items-center justify-center">
      <svg width={size} height={size} className="transform -rotate-90">
        <circle
          cx={size / 2}
          cy={size / 2}
          r={radius}
          stroke="currentColor"
          strokeWidth="2"
          fill="transparent"
          className="text-muted-foreground/20"
        />
        <circle
          cx={size / 2}
          cy={size / 2}
          r={radius}
          stroke="currentColor"
          strokeWidth="2"
          fill="transparent"
          strokeDasharray={circumference}
          strokeDashoffset={strokeDashoffset}
          className="text-primary transition-all duration-300 ease-in-out"
          strokeLinecap="round"
        />
      </svg>
      <div className="absolute inset-0 flex items-center justify-center">
        <span className="text-[9px] font-medium text-muted-foreground">
          {progress}%
        </span>
      </div>
    </div>
  );
};

const App: React.FC = () => {
  // Authentication hook
  const auth = useSupabaseAuth();
  
  // Auto-update hook
  const { updateState, installUpdate } = useAutoUpdate();
  
  // Authentication states
  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);
  
  // State declarations
  const [theme, setTheme] = useState<Theme>(Theme.Dark);
  const [activeMenuTab, setActiveMenuTab] = useState<'dimicall'>('dimicall');
  const [contacts, setContacts] = useState<Contact[]>([]);
  const [callStates, setCallStates] = useState<CallStates>({});
  const [searchTerm, setSearchTerm] = useState('');
  const [searchColumn, setSearchColumn] = useState<keyof Contact | 'all'>('all');
  const [selectedContact, setSelectedContact] = useState<Contact | null>(null);
  const [activeCallContactId, setActiveCallContactId] = useState<string | null>(null);
  const [callStartTime, setCallStartTime] = useState<Date | null>(null);
  
  const [isEmailDialogOpen, setIsEmailDialogOpen] = useState(false);
  const [isRappelDialogOpen, setIsRappelDialogOpen] = useState(false);
  const [isRendezVousDialogOpen, setIsRendezVousDialogOpen] = useState(false);
  const [isQualificationDialogOpen, setIsQualificationDialogOpen] = useState(false);
  const [isCalendarModalOpen, setIsCalendarModalOpen] = useState(false);
  const [isFnKeysInfoOpen, setIsFnKeysInfoOpen] = useState(false);
  const [isShortcutConfigOpen, setIsShortcutConfigOpen] = useState(false);
  const [isCalcomConfigOpen, setIsCalcomConfigOpen] = useState(false);
  const [isSettingsOpen, setIsSettingsOpen] = useState(false);
  const [shortcutIndicator, setShortcutIndicator] = useState<{
    isVisible: boolean;
    key: string;
    label: string;
  }>({ isVisible: false, key: '', label: '' });

  const [isAdbLogsDialogOpen, setIsAdbLogsDialogOpen] = useState(false);


  const [importProgress, setImportProgress] = useState<{ percentage: number; message: string } | null>(null);
  
  const [autoSearchMode, setAutoSearchMode] = useState<'disabled' | 'linkedin' | 'google'>(() => {
    try {
      const saved = localStorage.getItem('auto-search-mode');
      console.log('üîÑ [AUTO-SEARCH] Chargement du mode depuis localStorage:', saved);
      
      // Validation de la valeur charg√©e
      if (saved && ['disabled', 'linkedin', 'google'].includes(saved)) {
        console.log('‚úÖ [AUTO-SEARCH] Mode valide trouv√©:', saved);
        return saved as 'disabled' | 'linkedin' | 'google';
      }
      
      console.log('üîÑ [AUTO-SEARCH] Aucun mode valide trouv√©, utilisation par d√©faut: linkedin');
      return 'linkedin'; // Par d√©faut LinkedIn auto
    } catch (error) {
      console.error('‚ùå [AUTO-SEARCH] Erreur lors du chargement:', error);
      return 'linkedin';
    }
  });
  const [splitPanelOpen, setSplitPanelOpen] = useState(true);
  
  // √âtat pour l'URL Cal.com personnalis√©e
  const [calcomUrl, setCalcomUrl] = useState<string>(() => {
    const saved = localStorage.getItem('calcom-url');
    
    // Migration automatique des anciennes URLs vers la nouvelle avec overlayCalendar=true
    if (saved) {
      const newUrl = 'https://cal.com/dimitri-morel-arcanis-conseil/audit-patrimonial?overlayCalendar=true';
      
      // Liste des anciennes URLs √† migrer
      const oldUrls = [
        'https://cal.com/dimitri-morel-arcanis-conseil/audit-patrimonial',
        'https://cal.com/dimitri-morel-arcanis-conseil/arcanis-conseil-audit-patrimonial-dimicall',
      ];
      
      // V√©rifier si c'est une ancienne URL √† migrer
      const isOldUrl = oldUrls.some(oldUrl => saved === oldUrl) || 
                       (saved.includes('dimitri-morel-arcanis-conseil') && 
                        !saved.includes('overlayCalendar=true') && 
                        !saved.includes('audit-patrimonial?overlayCalendar=true'));
      
      if (isOldUrl) {
        console.log('üîÑ Migration URL Cal.com:', saved, '‚Üí', newUrl);
        localStorage.setItem('calcom-url', newUrl);
        return newUrl;
      }
      
      return saved;
    }
    
    return 'https://cal.com/dimitri-morel-arcanis-conseil/audit-patrimonial?overlayCalendar=true';
  });

  // √âtat pour le template SMS personnalis√©
  const [smsTemplate, setSmsTemplate] = useState<string>(() => {
    const saved = localStorage.getItem('sms-template');
    return saved || `Bonjour {civilite} {nom},

Pour resituer mon appel, je suis g√©rant priv√© au sein du cabinet de gestion de patrimoine Arcanis Conseil.

Je vous envoie l'adresse de notre site web que vous puissiez en savoir d'avantage :
https://arcanis-conseil.fr

Le site est avant tout une vitrine, le mieux est de m'appeler si vous souhaitez davantage d'informations ou de prendre un cr√©neau de 30 minutes dans mon agenda via ce lien :

https://calendly.com/dimitri-morel-arcanis-conseil/audit

Bien √† vous,

Dimitri MOREL - Arcanis Conseil`;
  });

  // √âtat intelligent pour les colonnes visibles bas√© sur les donn√©es r√©elles
  const [visibleColumns, setVisibleColumns] = useState<Record<string, boolean>>({});
  const [availableColumns, setAvailableColumns] = useState<string[]>([]);
  const [availableDataKeys, setAvailableDataKeys] = useState<(keyof Contact | null)[]>([]);

  // Fonction pour d√©tecter les colonnes disponibles dans les donn√©es
  const detectAvailableColumns = useCallback((contactsData: Contact[]) => {
    if (!contactsData || contactsData.length === 0) {
      // Colonnes par d√©faut minimales si pas de donn√©es
        const defaultColumns = ["#", "Pr√©nom", "Nom", "T√©l√©phone", "Mail", "Statut"];
  const defaultDataKeys = ['numeroLigne', 'prenom', 'nom', 'telephone', 'email', 'statut'] as (keyof Contact | null)[];
      
      setAvailableColumns(defaultColumns);
      setAvailableDataKeys(defaultDataKeys);
      
      // Initialiser la visibilit√© pour les colonnes par d√©faut
      setVisibleColumns(prevVisible => {
        const defaultVisibility = defaultColumns.reduce((acc, col) => {
          acc[col] = true;
          return acc;
        }, {} as Record<string, boolean>);
        return defaultVisibility;
      });
      return;
    }

    // Analyser un √©chantillon de contacts pour d√©tecter les colonnes avec des donn√©es
    const sampleSize = Math.min(10, contactsData.length);
    const sample = contactsData.slice(0, sampleSize);
    
    const detectedColumns = new Set<string>();
    const detectedDataKeys: (keyof Contact | null)[] = [];
    
    // Toujours inclure les colonnes essentielles ET importantes par d√©faut
    const alwaysIncludeColumns = [
      "#", "Pr√©nom", "Nom", 
      "T√©l√©phone", "Mail", "Statut", "Commentaire",
      "Date Rappel", "Heure Rappel", "Date RDV", "Heure RDV", 
      "Date Appel", "Heure Appel", "Dur√©e Appel"
    ];
    
    const alwaysIncludeDataKeys = [
      'numeroLigne', 'prenom', 'nom',
      'telephone', 'email', 'statut', 'commentaire',
      'dateRappel', 'heureRappel', 'dateRDV', 'heureRDV',
      'dateAppel', 'heureAppel', 'dureeAppel'
    ] as (keyof Contact)[];
    
    alwaysIncludeColumns.forEach((col, index) => {
      detectedColumns.add(col);
      detectedDataKeys.push(alwaysIncludeDataKeys[index] || null);
    });
    
    // V√©rifier les colonnes optionnelles pour voir si elles contiennent des donn√©es
    const optionalColumns = ["Sexe", "Don", "Qualit√©", "Type", "Date", "UID"];
    const optionalDataKeys = ['sexe', 'don', 'qualite', 'type', 'date', 'uid'] as (keyof Contact)[];
    
    COLUMN_HEADERS.forEach((header, index) => {
      if (alwaysIncludeColumns.includes(header)) return; // D√©j√† incluse
      
      const dataKey = CONTACT_DATA_KEYS[index];
      if (!dataKey) return;
      
      // V√©rifier si au moins un contact a une valeur non vide pour cette colonne
      const hasData = sample.some(contact => {
        const value = contact[dataKey as keyof Contact];
        return value !== undefined && value !== null && value !== '';
      });
      
      if (hasData) {
        detectedColumns.add(header);
        detectedDataKeys.push(dataKey as keyof Contact);
      }
    });

    const newAvailableColumns = Array.from(detectedColumns);
    setAvailableColumns(newAvailableColumns);
    setAvailableDataKeys(detectedDataKeys);
    
    // Mettre √† jour la visibilit√© en utilisant une fonction callback pour √©viter la d√©pendance circulaire
    setVisibleColumns(prevVisible => {
      const newVisibleColumns = newAvailableColumns.reduce((acc, col) => {
        // Garder la pr√©f√©rence existante si elle existe, sinon true par d√©faut
        acc[col] = prevVisible[col] !== undefined ? prevVisible[col] : true;
        return acc;
      }, {} as Record<string, boolean>);
      
      // Masquer par d√©faut certaines colonnes moins importantes (seulement si pas d√©j√† d√©fini)
      const lessImportantColumns = ["Sexe", "Don", "Qualit√©", "Type", "Date", "UID"];
      lessImportantColumns.forEach(col => {
        if (newVisibleColumns[col] !== undefined && prevVisible[col] === undefined) {
          newVisibleColumns[col] = false;
        }
      });
      
      return newVisibleColumns;
    });
  }, []); // Pas de d√©pendances pour √©viter la boucle infinie

  // Effect pour d√©tecter les colonnes quand les contacts changent
  useEffect(() => {
    detectAvailableColumns(contacts);
  }, [contacts]); // Seulement d√©pendant des contacts, pas de detectAvailableColumns

  // ADB Hook
  const { 
    connectionState: adbConnectionState, 
    isConnecting: adbConnecting, 
    connect: connectAdb, 
    disconnect: disconnectAdb,
    getLogs: getAdbLogs,
    setAutoDetection: setAdbAutoDetection,
    restartAdbServer: restartAdb,
    makeCall: makeAdbCall,
    endCall: adbEndCall,
    sendSms,
    getCurrentCallState,
    getLastCallNumber,
    checkCallState,
    onCallEnd
  } = useAdb();

  // Settings state
  const [currentTab, setCurrentTab] = useState<'table' | 'adb' | 'files' | 'performance'>('table');
  const [isImporting, setIsImporting] = useState(false);

  // Ref pour le scroll automatique de la table
  const contactTableRef = useRef<ContactTableRef>(null);

  // Stable helper functions
  const showNotification = useCallback((type: 'success' | 'error' | 'info', message: string, duration: number = 3000) => {
    // Notifications d√©sactiv√©es - fonction no-op
    return;
  }, []);

  // Handler pour l'authentification r√©ussie
  const handleAuthenticated = useCallback(() => {
    setIsAuthModalOpen(false);
    showNotification('success', `Bienvenue ${auth.user?.email}!`, 3000);
  }, [auth.user, showNotification]);

  // Effect pour v√©rifier l'authentification au d√©marrage et fermer la modale apr√®s connexion
  useEffect(() => {
    if (!auth.isAuthenticated) {
      setIsAuthModalOpen(true);
    } else {
      // Utilisateur authentifi√© : fermer la modale sans notification
      setIsAuthModalOpen(false);
    }
  }, [auth.isAuthenticated]);



  const updateContact = useCallback(async (updatedFields: Partial<Contact> & { id: string }) => {
    // Utiliser une fonction de mise √† jour pour √©viter les stale closures
    let updatedContact: Contact | null = null;
    let contactFound = false;
    
    setContacts(currentContacts => {
      const existingContact = currentContacts.find(c => c.id === updatedFields.id);
      if (!existingContact) {
        console.warn(`Contact avec l'ID ${updatedFields.id} non trouv√© pour mise √† jour`);
        return currentContacts; // Retourner l'√©tat inchang√©
      }

      contactFound = true;
      updatedContact = { ...existingContact, ...updatedFields };
      const updatedContacts = currentContacts.map(c => c.id === updatedFields.id ? updatedContact! : c);
      
      // Sauvegarder les contacts mis √† jour
      saveContacts(updatedContacts);
      
      // Si on a une table import√©e, la mettre √† jour aussi
      if (hasImportedTable()) {
        const savedTable = loadImportedTable();
        if (savedTable && savedTable.metadata) {
          saveImportedTable(updatedContacts, savedTable.metadata);
    
        }
      }
      
      return updatedContacts; // Forcer le re-render imm√©diat
    });
    
    // Si le contact n'a pas √©t√© trouv√©, arr√™ter ici
    if (!contactFound || !updatedContact) {
      return;
    }

    // üîÑ Mise √† jour en temps r√©el du contact s√©lectionn√© dans le panneau lat√©ral
    if (selectedContact?.id === updatedFields.id) {
      setSelectedContact(updatedContact);

    }

    // Forcer un petit d√©lai pour que l'interface se mette √† jour
    await new Promise(resolve => setTimeout(resolve, 50));

  }, [selectedContact, showNotification]); // Retir√© 'contacts' car on utilise setContacts avec fonction

  const addContact = useCallback(async (newContact: Omit<Contact, 'id' | 'numeroLigne'>) => {
    const contactWithId = {
      ...newContact,
      id: uuidv4(),
      numeroLigne: contacts.length + 1,
    };

    // Ajout local imm√©diat
    setContacts(prev => [...prev, contactWithId].map((c, idx) => ({ ...c, numeroLigne: idx + 1 })));

    // Synchronisation avec Supabase uniquement si activ√©e
    showNotification('success', `Contact ${newContact.prenom} ${newContact.nom} ajout√©`);

    return contactWithId;
  }, [contacts, showNotification]);

  const updateCallState = useCallback((contactId: string, newState: Partial<CallState>) => {
    setCallStates(prev => ({ ...prev, [contactId]: { ...(prev[contactId] || {}), ...newState } }));
  }, []);
  
  const refreshData = useCallback(() => {
    const loadedContacts = loadContacts();
    const contactsWithIds = loadedContacts.map((c, idx) => ({
      ...c,
      telephone: formatPhoneNumber(c.telephone || ""),
      id: c.id || uuidv4(),
      numeroLigne: idx + 1,
    }));
    setContacts(contactsWithIds);
    setCallStates(loadCallStates());
    
    // V√©rifier si le contact s√©lectionn√© existe toujours
    if (selectedContact) {
      const stillExists = contactsWithIds.find(c => c.id === selectedContact.id);
      if (!stillExists) {
        setSelectedContact(null);
      }
    }
  }, [selectedContact]);

  const handleRowSelection = useCallback((contact: Contact | null) => {
    console.log('S√©lection contact:', contact ? `${contact.prenom} ${contact.nom} (ID: ${contact.id})` : 'Aucun');
    setSelectedContact(contact);
  }, []);

  const handleDeleteContact = useCallback(async (contactId: string) => {
    if (window.confirm("√ätes-vous s√ªr de vouloir supprimer ce contact ?")) {
      const contactToDelete = contacts.find(c => c.id === contactId);
      
      // Suppression locale imm√©diate
      setContacts(prev => prev.filter(c => c.id !== contactId).map((c, idx) => ({...c, numeroLigne: idx + 1})));
      setCallStates(prev => {
        const newStates = {...prev};
        delete newStates[contactId];
        return newStates;
      });
      if (selectedContact?.id === contactId) {
        setSelectedContact(null);
      }
      if (activeCallContactId === contactId) {
        setActiveCallContactId(null);
        setCallStartTime(null);
      }

      // Synchronisation avec Supabase uniquement si activ√©e
      showNotification('info', `Contact ${contactToDelete?.prenom} ${contactToDelete?.nom} supprim√©.`);
    }
  }, [contacts, selectedContact, activeCallContactId, showNotification]);

  const endActiveCall = useCallback((markAsError = false, contactIdToEnd?: string) => {
    const idToProcess = contactIdToEnd || activeCallContactId;
    if (idToProcess && callStates[idToProcess]?.isCalling) {
      updateCallState(idToProcess, { isCalling: false, hasBeenCalled: !markAsError });
      if (callStartTime && !markAsError) {
        const durationMs = new Date().getTime() - callStartTime.getTime();
        const seconds = Math.floor((durationMs / 1000) % 60);
        const minutes = Math.floor((durationMs / (1000 * 60)) % 60);
        const durationStr = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        updateContact({id: idToProcess, dureeAppel: durationStr });
      } else if (markAsError) {
        updateContact({id: idToProcess, dureeAppel: "Erreur" });
      }
      if (activeCallContactId === idToProcess) {
        setActiveCallContactId(null);
        setCallStartTime(null);
      }
      showNotification('info', "Appel termin√© (simul√©).");
    }
  }, [activeCallContactId, callStates, callStartTime, updateCallState, updateContact, showNotification]);

  // Search handlers
  const handleLinkedInSearch = useCallback((contact?: Contact) => {
    const target = contact || selectedContact;
    if (!target) {
      showNotification('info', "S√©lectionnez un contact pour la recherche LinkedIn.");
      return;
    }
    searchLinkedIn(target.prenom, target.nom);
  }, [selectedContact, showNotification]);

  const handleGoogleSearch = useCallback((contact?: Contact) => {
    const target = contact || selectedContact;
    if (!target) {
      showNotification('info', "S√©lectionnez un contact pour la recherche Google.");
      return;
    }
    searchGoogle(target.prenom, target.nom);
  }, [selectedContact, showNotification]);

  // Fonction utilitaire pour nettoyer et normaliser le texte des SMS
  const cleanSmsText = (text: string): string => {
    const cleaned = text
      .replace(/[''‚Äõ‚Äö]/g, "'")
      .replace(/[""]/g, '"')
      .replace(/[\u200B-\u200D\uFEFF]/g, '')
      // Remplacer les groupes d'espaces ou tabulations par un seul espace
      .replace(/[ \t]+/g, ' ')
      // Supprimer les espaces en d√©but et fin de lignes, mais laisser les \n intacts
      .replace(/\n[ \t]+/g, '\n')
      .replace(/[ \t]+\n/g, '\n')
      .trim();

    console.log('üßπ Nettoyage SMS:', {
      'Texte original': text,
      'Texte nettoy√©': cleaned,
      'Contient sauts de ligne': cleaned.includes('\n'),
      'Nombre de lignes': cleaned.split(/\n/).length,
    });

    return cleaned;
  };

  const handleSms = useCallback(async (civilite?: string, contact?: Contact) => {
    const target = contact || selectedContact;
    if (!target) {
        showNotification('info', "S√©lectionnez un contact pour envoyer un SMS.");
        return;
    }

    // V√©rifier la connexion ADB
    if (!adbConnectionState.isConnected) {
      showNotification('error', "Aucun appareil Android connect√© via ADB. Connectez votre t√©l√©phone d'abord.");
      return;
    }

    // V√©rifier que le contact a un num√©ro de t√©l√©phone
    if (!target.telephone) {
      showNotification('error', `Aucun num√©ro de t√©l√©phone pour ${target.prenom} ${target.nom}.`);
      return;
    }

    // Cr√©er le nom d'accueil avec civilit√©
    const greetingName = civilite ? `${civilite} ${target.nom}`.trim() : `${target.prenom} ${target.nom}`.trim() || "client(e)";
    
    // Utiliser le template SMS personnalis√© avec remplacement des variables
    const rawMessageBody = smsTemplate
      .replace(/{civilite}/g, civilite || target.prenom || "")
      .replace(/{nom}/g, target.nom || "")
      .replace(/{prenom}/g, target.prenom || "")
      .replace(/{nom_complet}/g, `${target.prenom || ""} ${target.nom || ""}`.trim() || "client(e)");

    const messageBody = cleanSmsText(rawMessageBody);

    // Nettoyer le num√©ro de t√©l√©phone
    const phoneNumberCleaned = target.telephone.replace(/\s/g, '');

    try {
      showNotification('info', "Pr√©paration du SMS...");
      
      console.log('üì± Envoi SMS:', {
        'Destinataire': `${target.prenom} ${target.nom}`,
        'Num√©ro': phoneNumberCleaned,
        'Template original': smsTemplate,
        'Message brut apr√®s variables': rawMessageBody,
        'Message final nettoy√©': messageBody,
        'Longueur message': messageBody.length
      });
      
      // SOLUTION: Utiliser executeShell directement comme dans le test qui fonctionne
      // pour pr√©server les apostrophes correctement encod√©es
      // Forcer l'encodage des apostrophes comme dans la commande qui fonctionne
      const encodedMessage = encodeURIComponent(messageBody).replace(/'/g, '%27');
      const shellCommand = `am start -a android.intent.action.SENDTO -d "sms:${phoneNumberCleaned}?body=${encodedMessage}"`;
      
      console.log('üì± Commande shell SMS:', shellCommand);
      
      const result = await window.electronAPI.adb.executeShell(shellCommand);
      
      if (result.success) {
        console.log('üì± R√©sultat SMS:', result.output);
        showNotification('success', "L'application de messagerie s'est ouverte avec votre message pr√©-rempli. Vous n'avez plus qu'√† v√©rifier et envoyer.");
      } else {
        console.error('üì± Erreur SMS:', result.error);
        showNotification('error', `√âchec de la pr√©paration du SMS: ${result.error || 'Erreur inconnue'}`);
      }
    } catch (error) {
      console.error('üì± Erreur lors de la pr√©paration du SMS:', error);
      showNotification('error', `Erreur lors de la pr√©paration du SMS: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
    }
  }, [selectedContact, showNotification, adbConnectionState.isConnected, smsTemplate]);

  const makePhoneCall = useCallback(async (contactToCall?: Contact) => {
    console.log('üîç [MAKEPHONECALL] D√©but makePhoneCall, contactToCall:', contactToCall);
    console.log('üîç [MAKEPHONECALL] selectedContact:', selectedContact);
    
    const targetContact = contactToCall || selectedContact;
    console.log('üîç [MAKEPHONECALL] targetContact final:', targetContact);

    if (!targetContact) {
      console.log('‚ùå [MAKEPHONECALL] Pas de contact - RETURN');
      showNotification('error', "S√©lectionnez un contact pour appeler.");
      return;
    }
    
    console.log('üîç [MAKEPHONECALL] activeCallContactId:', activeCallContactId);
    if (activeCallContactId && activeCallContactId !== targetContact.id) {
      console.log('üîç [MAKEPHONECALL] Fin d\'appel en cours...');
      endActiveCall(false, activeCallContactId); 
    }

    // V√©rifier la connexion ADB
    console.log('üîç [MAKEPHONECALL] adbConnectionState.isConnected:', adbConnectionState.isConnected);
    if (!adbConnectionState.isConnected) {
      console.log('‚ùå [MAKEPHONECALL] ADB pas connect√© - RETURN');
      showNotification('error', "Aucun appareil Android connect√© via ADB. Connectez votre t√©l√©phone d'abord.");
      return;
    }

    // Nettoyer le num√©ro de t√©l√©phone pour l'appel
    const cleanPhoneNumber = targetContact.telephone.replace(/[^0-9+]/g, '');
    console.log('üîç [MAKEPHONECALL] cleanPhoneNumber:', cleanPhoneNumber);
    
    try {
      console.log('üîç [MAKEPHONECALL] D√©but du try...');
      showNotification('info', `Appel en cours vers ${targetContact.prenom} ${targetContact.nom} au ${targetContact.telephone}...`);
      
      console.log('üîç [MAKEPHONECALL] Avant makeAdbCall...');
      // Faire l'appel r√©el via ADB
        const callResult = await makeAdbCall(cleanPhoneNumber);
        console.log('üîç [MAKEPHONECALL] Apr√®s makeAdbCall, result:', callResult);
        
        if (callResult.success) {
          // Appel r√©ussi
          console.log(`üìû Configuration de l'appel pour le contact ${targetContact.id}...`);
          updateCallState(targetContact.id, { isCalling: true, hasBeenCalled: false });
          setActiveCallContactId(targetContact.id);
          setCallStartTime(new Date());
          console.log(`üìû Contact actif d√©fini: ${targetContact.id}, heure de d√©but: ${new Date()}`);
          
          const now = new Date();
          updateContact({
            id: targetContact.id,
            dateAppel: now.toISOString().split('T')[0],
            heureAppel: now.toTimeString().substring(0,5),
            dureeAppel: "00:00" 
          });
          setSelectedContact(targetContact);
        
        showNotification('success', `Appel initi√© vers ${targetContact.prenom} ${targetContact.nom}`);
        
        // Recherche automatique selon le mode configur√©
        if (autoSearchMode === 'linkedin') {
          handleLinkedInSearch(targetContact);
          showNotification('info', 'Ouverture automatique LinkedIn', 2000);
        } else if (autoSearchMode === 'google') {
          handleGoogleSearch(targetContact);
          showNotification('info', 'Ouverture automatique Google', 2000);
        }
        // Si 'disabled', ne rien faire
      } else {
        // √âchec de l'appel
        showNotification('error', `√âchec de l'appel: ${callResult.message}`);
      }
    } catch (error) {
      showNotification('error', `Erreur lors de l'appel: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
    }
  }, [selectedContact, activeCallContactId, endActiveCall, updateCallState, updateContact, autoSearchMode, 
      showNotification, handleLinkedInSearch, handleGoogleSearch, adbConnectionState.isConnected, makeAdbCall]);

  // Surveillance robuste des fins d'appel via √©v√©nements ADB
  useEffect(() => {
    console.log('üîß Configuration de la surveillance des fins d\'appels...');
    
    const unsubscribeCallEnd = onCallEnd((callEndEvent) => {
      console.log('üìû √âv√©nement de fin d\'appel re√ßu:', callEndEvent);
      
      if (activeCallContactId) {
        // Calculer la dur√©e d'appel format√©e
        const seconds = Math.floor((callEndEvent.durationMs / 1000) % 60);
        const minutes = Math.floor((callEndEvent.durationMs / (1000 * 60)) % 60);
        const durationStr = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        
        console.log(`üìû Mise √† jour du contact ${activeCallContactId} avec dur√©e: ${durationStr}`);
        
        // Mettre √† jour le contact avec la dur√©e r√©elle
        updateContact({
          id: activeCallContactId, 
          dureeAppel: durationStr
        });
        
        // Terminer l'appel dans l'interface
        updateCallState(activeCallContactId, { isCalling: false, hasBeenCalled: true });
        setActiveCallContactId(null);
        setCallStartTime(null);
        
        showNotification('success', `Appel termin√© - Dur√©e: ${durationStr}`);
      } else {
        console.log('üìû Fin d\'appel d√©tect√©e mais aucun appel actif dans l\'interface');
        showNotification('info', "Appel termin√© d√©tect√©.");
      }
    });
    
    return () => {
      console.log('üîß Nettoyage de la surveillance des fins d\'appels...');
      unsubscribeCallEnd();
    };
  }, [activeCallContactId, onCallEnd, updateContact, updateCallState, showNotification]);

  // Auto-connexion ADB au d√©marrage si pas encore connect√©
  useEffect(() => {
    if (!adbConnectionState.isConnected && !adbConnecting) {
      // Essayer de se connecter automatiquement apr√®s 2 secondes
      const timer = setTimeout(() => {
        connectAdb().catch(error => {
          console.log('Auto-connexion ADB √©chou√©e:', error);
        });
      }, 2000);
      
      return () => clearTimeout(timer);
    }
  }, [adbConnectionState.isConnected, adbConnecting, connectAdb]);

  // useEffects
  useEffect(() => {
    if (theme === Theme.Dark) {
      document.documentElement.classList.add('dark');
      document.documentElement.style.backgroundColor = 'hsl(220 9% 4%)';
    } else {
      document.documentElement.classList.remove('dark');
      document.documentElement.style.backgroundColor = 'hsl(0 0% 100%)';
    }
  }, [theme]);

  const [isInitialized, setIsInitialized] = useState(false);

  useEffect(() => {
    // S'ex√©cuter une seule fois au d√©marrage
    if (!isInitialized) {
      // V√©rifier s'il y a une table import√©e sauvegard√©e
      if (hasImportedTable()) {
        const savedTable = loadImportedTable();
        if (savedTable && savedTable.contacts.length > 0) {
          const metadata = savedTable.metadata;
          console.log(`üîÑ Restauration de la table import√©e: ${savedTable.contacts.length} contacts (${metadata?.fileName})`);
          
          const contactsWithIds = savedTable.contacts.map((c, idx) => ({
            ...c,
            telephone: formatPhoneNumber(c.telephone || ""),
            id: c.id || uuidv4(),
            numeroLigne: idx + 1,
          }));
          
          setContacts(contactsWithIds);
          setCallStates(loadCallStates());
          showNotification('success', `Table import√©e restaur√©e: ${contactsWithIds.length} contacts (${metadata?.fileName})`, 4000);
          setIsInitialized(true);
          return; // Ne pas charger les contacts par d√©faut
        }
      }
      
      // Chargement normal si pas de table import√©e
      refreshData();
      setIsInitialized(true);
    }
  }, [isInitialized, showNotification]);

  useEffect(() => {
    // Ne sauvegarder que si on n'est pas en train de restaurer
    if (contacts.length > 0) {
      saveContacts(contacts);
    }
  }, [contacts]);

  useEffect(() => {
    saveCallStates(callStates);
  }, [callStates]);

  // Configuration des mises √† jour temps r√©el - Supabase supprim√© pour lib√©rer de l'espace
  
  const filteredContacts = useMemo(() => {
    if (!searchTerm) return contacts;
    const lowerSearchTerm = searchTerm.toLowerCase();
    return contacts.filter(contact => {
      if (searchColumn === 'all') {
        return Object.values(contact).some(value =>
          String(value).toLowerCase().includes(lowerSearchTerm)
        );
      }
      const contactValue = contact[searchColumn as keyof Contact];
      return String(contactValue).toLowerCase().includes(lowerSearchTerm);
    });
     }, [contacts, searchTerm, searchColumn]);

   // Variables de protection contre les workflows multiples (persistantes entre les re-renders)
   const isProcessingRef = useRef(false);
   const lastKeyPressRef = useRef<{ key: string; timestamp: number } | null>(null);
   
   // Refs pour stocker les valeurs actuelles (√©vite les probl√®mes de closure stale)
   const selectedContactRef = useRef<Contact | null>(null);
   const activeCallContactIdRef = useRef<string | null>(null);
   const filteredContactsRef = useRef<Contact[]>([]);
   const contactsRef = useRef<Contact[]>([]);
   const makePhoneCallRef = useRef<((contactToCall?: Contact) => Promise<void>) | null>(null);
   
   // Mettre √† jour les refs quand les valeurs changent
   useEffect(() => {
     selectedContactRef.current = selectedContact;
     console.log(`üîÑ [CONTACT_REF] Contact s√©lectionn√© mis √† jour:`, selectedContact ? `${selectedContact.prenom} ${selectedContact.nom}` : 'null');
   }, [selectedContact]);
   
   useEffect(() => {
     activeCallContactIdRef.current = activeCallContactId;
   }, [activeCallContactId]);
   
   useEffect(() => {
     filteredContactsRef.current = filteredContacts;
   }, [filteredContacts]);
   
   useEffect(() => {
     contactsRef.current = contacts;
   }, [contacts]);
   
   useEffect(() => {
     makePhoneCallRef.current = makePhoneCall;
   }, [makePhoneCall]);

   // Persistance du mode d'auto-recherche dans localStorage
   useEffect(() => {
     try {
       console.log('üíæ [AUTO-SEARCH] Sauvegarde du mode:', autoSearchMode);
       localStorage.setItem('auto-search-mode', autoSearchMode);
       console.log('‚úÖ [AUTO-SEARCH] Mode sauvegard√© avec succ√®s dans localStorage');
       
       // V√©rification imm√©diate de la sauvegarde
       const verification = localStorage.getItem('auto-search-mode');
       if (verification === autoSearchMode) {
         console.log('‚úÖ [AUTO-SEARCH] V√©rification r√©ussie - Mode persistent:', verification);
       } else {
         console.error('‚ùå [AUTO-SEARCH] √âchec de la v√©rification:', { expected: autoSearchMode, actual: verification });
       }
     } catch (error) {
       console.error('‚ùå [AUTO-SEARCH] Erreur lors de la sauvegarde:', error);
     }
   }, [autoSearchMode]);

   // Fonction de debug pour tester la persistence manuellement (accessible via window.testAutoSearchPersistence)
   useEffect(() => {
     (window as any).testAutoSearchPersistence = () => {
       console.log('üß™ [AUTO-SEARCH] Test de persistence:');
       console.log('üìñ Mode actuel en m√©moire:', autoSearchMode);
       console.log('üíæ Mode sauvegard√© en localStorage:', localStorage.getItem('auto-search-mode'));
       console.log('üîÑ Pour tester: changez le mode via l\'interface, puis rafra√Æchissez la page');
     };
   }, [autoSearchMode]);

   // Log initial du mode d'auto-recherche au d√©marrage
   useEffect(() => {
     console.log('üöÄ [AUTO-SEARCH] Application d√©marr√©e avec le mode:', autoSearchMode);
     console.log('üí° [AUTO-SEARCH] Ce mode sera utilis√© avec la touche F1 et le bouton Appeler');
   }, []); // Seulement au mount

   // Handler pour les raccourcis globaux Electron
   useEffect(() => {
     const handleGlobalFnKey = async (event: any, key: string) => {
       // Protection contre les workflows multiples
       if (isProcessingRef.current) {
         return;
       }
       
       // Protection contre les appuis r√©p√©t√©s (debounce de 500ms)
       const now = Date.now();
       const lastKeyPress = lastKeyPressRef.current;
       if (lastKeyPress && lastKeyPress.key === key && (now - lastKeyPress.timestamp) < 500) {
         return;
       }
       lastKeyPressRef.current = { key, timestamp: now };
       
            // R√©cup√©rer le contact s√©lectionn√© au moment de l'appui sur la touche (depuis la ref)
     const currentSelectedContact = selectedContactRef.current;
     if (!currentSelectedContact) {
       showNotification('error', `Veuillez s√©lectionner un contact avant d'utiliser ${key}`);
       return;
     }
     
     // Traitement sp√©cial pour F1 : Appeler le contact s√©lectionn√© (identique au bouton "Appeler")
     if (key === 'F1') {
       isProcessingRef.current = true; // Bloquer les nouveaux workflows
       
       try {
         console.log(`üìû [F1] Lancement d'appel via F1 (identique au bouton Appeler)`);
         console.log(`üìû [F1] Contact s√©lectionn√©:`, currentSelectedContact);
         console.log(`üìû [F1] makePhoneCall function:`, makePhoneCall);
         
         // Passer explicitement le contact pour √©viter les closures stales
         await makePhoneCall(currentSelectedContact);
         console.log(`üìû [F1] makePhoneCall termin√©`);
       } catch (error) {
         console.error(`‚ùå [F1] Erreur lors de l'appel:`, error);
       } finally {
         isProcessingRef.current = false; // D√©bloquer les workflows
       }
       return; // Sortir ici pour F1, pas besoin du workflow de changement de statut
     }
     
     // Utiliser le service de raccourcis personnalis√©s pour F2-F10
     const newStatus = shortcutService.getStatusForKey(key);
     if (!newStatus) {
       return;
     }
       
       isProcessingRef.current = true; // Bloquer les nouveaux workflows
       
       // Afficher l'indicateur visuel
       const shortcut = shortcutService.getShortcuts().find(s => s.key === key);
       if (shortcut) {
         setShortcutIndicator({
           isVisible: true,
           key: shortcut.key,
           label: shortcut.label
         });
       }
       
       try {
         await executeSequentialWorkflow(key, newStatus, currentSelectedContact);
       } catch (error) {
         console.error(`‚ùå [WORKFLOW] Erreur dans le workflow ${key}:`, error);
         showNotification('error', `Erreur lors du workflow ${key}: ${error}`);
       } finally {
         isProcessingRef.current = false; // D√©bloquer les workflows
       }
     };

     // Fonction de workflow s√©quentiel avec v√©rifications
     const executeSequentialWorkflow = async (key: string, newStatus: ContactStatus, contact: Contact) => {
       // √âTAPE 1: Raccrochage (si appel en cours)
       const wasCallActive = activeCallContactIdRef.current === contact.id;
       if (wasCallActive) {
         const hangupSuccess = await performHangupWithRetry();
         if (!hangupSuccess) {
           throw new Error("√âchec du raccrochage apr√®s plusieurs tentatives");
         }
         
         // D√©lai de stabilisation apr√®s raccrochage
         await waitWithLog(500, "Stabilisation apr√®s raccrochage");
       }

       // √âTAPE 2: Application du statut avec v√©rification am√©lior√©e
       const statusUpdateSuccess = await performStatusUpdateWithVerification(contact, newStatus);
       if (!statusUpdateSuccess) {
         showNotification('info', `${key}: Statut appliqu√© mais non v√©rifi√© pour ${contact.prenom}`);
       } else {
         showNotification('success', `${key}: ${contact.prenom} ‚Üí "${newStatus}"`);
       }
       
       // D√©lai pour que l'interface se mette √† jour
       await waitWithLog(600, "Mise √† jour de l'interface");

       // √âTAPE 3: S√©lection du contact suivant avec v√©rification
       const nextContact = await findAndSelectNextContact(contact);
       if (!nextContact) {
         showNotification('info', "Fin de la liste atteinte.");
         return;
       }
       
       // D√©lai pour que la s√©lection soit effective
       await waitWithLog(300, "Finalisation de la s√©lection");

       // √âTAPE 4: Lancement de l'appel suivant avec v√©rification
       const callSuccess = await performCallWithVerification(nextContact);
       if (!callSuccess) {
         showNotification('error', `Workflow termin√©, mais √©chec de l'appel vers ${nextContact.prenom}`);
         return;
       }
     };

     // Fonction de raccrochage avec retry
     const performHangupWithRetry = async (): Promise<boolean> => {
       for (let attempt = 1; attempt <= 3; attempt++) {
         try {
           const result = await adbEndCall();
           
           // V√©rifier que l'appel est vraiment termin√©
           await waitWithLog(300, `V√©rification raccrochage (tentative ${attempt})`);
           
           // V√©rifier l'√©tat apr√®s le d√©lai
           if (activeCallContactIdRef.current === null) {
             return true;
           }
           
         } catch (error) {
           console.error(`‚ùå [HANGUP] Erreur tentative ${attempt}:`, error);
         }
         
         if (attempt < 3) {
           await waitWithLog(400, `D√©lai avant tentative ${attempt + 1}`);
         }
       }
       
       // Forcer la fin d'appel si toutes les tentatives √©chouent
       if (selectedContactRef.current) {
         endActiveCall(false, selectedContactRef.current.id);
       }
       return false;
     };

     // Fonction de mise √† jour du statut avec v√©rification am√©lior√©e
     const performStatusUpdateWithVerification = async (contact: Contact, newStatus: ContactStatus): Promise<boolean> => {
       try {
         // Appliquer la mise √† jour avec retry
         let updateAttempts = 0;
         const maxUpdateAttempts = 3;
         let updateSuccess = false;
         
         while (updateAttempts < maxUpdateAttempts && !updateSuccess) {
           updateAttempts++;
           
           try {
             await updateContact({ id: contact.id, statut: newStatus });
             updateSuccess = true;
           } catch (error) {
             if (updateAttempts < maxUpdateAttempts) {
               await waitWithLog(300, `D√©lai avant nouvelle tentative de mise √† jour`);
             }
           }
         }
         
         if (!updateSuccess) {
           return false;
         }
         
         // D√©lais plus longs pour la propagation
         await waitWithLog(400, "Propagation de la mise √† jour du statut");
         
         // V√©rifier dans plusieurs sources avec d√©lais plus longs
         let verificationAttempts = 0;
         const maxVerificationAttempts = 8; // Plus de tentatives
         
         while (verificationAttempts < maxVerificationAttempts) {
           verificationAttempts++;
           
           // V√©rifier dans les contacts actuels
           const updatedContact = contactsRef.current.find(c => c.id === contact.id);
           
           if (updatedContact?.statut === newStatus) {
             return true;
           }
           
           if (verificationAttempts < maxVerificationAttempts) {
             await waitWithLog(250, `Attente propagation (tentative ${verificationAttempts})`);
           }
         }
         
         // Derni√®re tentative de force-update si la v√©rification √©choue
         try {
           await updateContact({ id: contact.id, statut: newStatus });
           await waitWithLog(500, "Force-update final");
           
           const finalCheck = contactsRef.current.find(c => c.id === contact.id);
           if (finalCheck?.statut === newStatus) {
             return true;
           }
         } catch (error) {
           console.error(`‚ùå [STATUS] √âchec du force-update:`, error);
         }
         
         return false; // Plus strict - on signale l'√©chec
         
       } catch (error) {
         console.error(`‚ùå [STATUS] Erreur lors de la mise √† jour du statut:`, error);
         return false;
       }
     };

     // Fonction de s√©lection du contact suivant avec v√©rification
     const findAndSelectNextContact = async (currentContact: Contact): Promise<Contact | null> => {
       try {
         const currentIndex = filteredContactsRef.current.findIndex(c => c.id === currentContact.id);
         if (currentIndex === -1) {
           return null;
         }
         
         if (currentIndex >= filteredContactsRef.current.length - 1) {
           return null;
         }
         
         const nextContact = filteredContactsRef.current[currentIndex + 1];
         
         // S√©lectionner le contact suivant
         setSelectedContact(nextContact);
         
         // D√©lai pour que la s√©lection soit effective
         await waitWithLog(200, "Application de la s√©lection");
         
         // Scroll automatique vers le contact s√©lectionn√©
         if (contactTableRef.current) {
           contactTableRef.current.scrollToContact(nextContact.id);
         }
         
         return nextContact;
         
       } catch (error) {
         console.error(`‚ùå [SELECT] Erreur lors de la s√©lection du contact suivant:`, error);
         return null;
       }
     };

     // Fonction d'appel avec v√©rification
     const performCallWithVerification = async (contact: Contact): Promise<boolean> => {
       try {
         // Lancer l'appel en utilisant la ref pour √©viter les stale closures
         if (!makePhoneCallRef.current) {
           return false;
         }
         await makePhoneCallRef.current(contact);
         
         // D√©lai plus court pour que l'appel s'initialise
         await waitWithLog(400, "Initialisation de l'appel");
         
         // V√©rifier que l'appel a bien d√©marr√© (avec plusieurs tentatives)
         let callVerificationAttempts = 0;
         const maxCallVerificationAttempts = 5; // Plus de tentatives
         
         while (callVerificationAttempts < maxCallVerificationAttempts) {
           callVerificationAttempts++;
           
           // V√©rifier √† la fois la ref ET l'√©tat direct avec une fonction de v√©rification
           let isCallActive = false;
           
           // M√©thode 1: V√©rifier la ref
           if (activeCallContactIdRef.current === contact.id) {
             isCallActive = true;
           }
           
           // M√©thode 2: V√©rifier l'√©tat des appels directement
           if (!isCallActive) {
             // Utiliser une fonction de callback pour acc√©der √† l'√©tat le plus r√©cent
             await new Promise<void>((resolve) => {
               setCallStates(currentCallStates => {
                 const contactCallState = currentCallStates[contact.id];
                 if (contactCallState?.isCalling) {
                   isCallActive = true;
                 }
                 resolve();
                 return currentCallStates; // Retourner l'√©tat inchang√©
               });
             });
           }
           
           if (isCallActive) {
             return true;
           }
           
           if (callVerificationAttempts < maxCallVerificationAttempts) {
             await waitWithLog(200, `V√©rification appel (tentative ${callVerificationAttempts})`);
           }
         }
         
         return false;
         
       } catch (error) {
         console.error(`‚ùå [CALL] Erreur lors du lancement de l'appel vers ${contact.prenom}:`, error);
         return false;
       }
     };

     // Fonction utilitaire pour les d√©lais
     const waitWithLog = async (ms: number, reason: string): Promise<void> => {
       await new Promise(resolve => setTimeout(resolve, ms));
     };

     // V√©rifier l'API Electron via window.electronAPI
     if (window.electronAPI?.ipcRenderer) {
       try {
         window.electronAPI.ipcRenderer.on('global-fn-key', handleGlobalFnKey);
         
         return () => {
           window.electronAPI.ipcRenderer.removeListener('global-fn-key', handleGlobalFnKey);
         };
       } catch (error) {
         console.error('‚ùå [ELECTRON_FN] Erreur activation raccourcis:', error);
       }
     }
   }, [adbEndCall, endActiveCall, updateContact, showNotification]); // Retir√© makePhoneCall car on utilise maintenant makePhoneCallRef

  // Other handlers - version optimis√©e pour gros fichiers
  const handleImportFile = async (droppedFiles: FileList) => {
    if (droppedFiles && droppedFiles[0]) {
      const file = droppedFiles[0];
      await handleSingleFileImport(file);
    }
  };

  // Nouvelle fonction pour g√©rer l'import d'un seul fichier (utilis√©e par le drag & drop)
  const handleSingleFileImport = async (file: File) => {
    const fileSizeMB = file.size / (1024 * 1024);
    
    setImportProgress({ 
      message: `Importation de "${file.name}" (${fileSizeMB.toFixed(1)} MB)...`, 
      percentage: 0 
    });
    
    try {
      // Analyse de la taille du fichier
      if (fileSizeMB > 50) {
        setImportProgress({ 
          message: `‚ö†Ô∏è Fichier volumineux d√©tect√© (${fileSizeMB.toFixed(1)} MB). Traitement optimis√©...`, 
          percentage: 5 
        });
        await new Promise(res => setTimeout(res, 1000));
      }
      
      setImportProgress({ message: `üìñ Lecture du fichier...`, percentage: 10 });
      await new Promise(res => setTimeout(res, 200));
      
      setImportProgress({ message: `‚öôÔ∏è Traitement par chunks...`, percentage: 20 });
      
      // Import optimis√©
      const newContacts = await importContactsFromFile(file);
      
      setImportProgress({ message: `üìù Pr√©paration des donn√©es...`, percentage: 80 });
      await new Promise(res => setTimeout(res, 100));
      
      const updatedContacts = newContacts.map((c, idx) => ({ 
        ...c, 
        numeroLigne: idx + 1, 
        id: c.id || uuidv4() 
      }));
      
      setImportProgress({ message: `üíæ Sauvegarde...`, percentage: 90 });
      
      // Sauvegarder la table import√©e pour persistance
      const fileExtension = file.name.split('.').pop()?.toLowerCase();
      const source = fileExtension === 'csv' ? 'csv' : 'xlsx';
      saveImportedTable(updatedContacts, {
        fileName: file.name,
        source: source as 'csv' | 'xlsx',
        totalRows: updatedContacts.length
      });
      
      setContacts(updatedContacts);
      setCallStates({});
      setSelectedContact(null);
      
      setImportProgress({ message: `‚úÖ Finalisation...`, percentage: 100 });
      await new Promise(res => setTimeout(res, 500)); 
      setImportProgress(null);
      
      const message = fileSizeMB > 10 
        ? `üéâ ${updatedContacts.length} contacts import√©s avec succ√®s depuis un fichier de ${fileSizeMB.toFixed(1)} MB !`
        : `‚úÖ ${updatedContacts.length} contacts import√©s avec succ√®s !`;
        
      showNotification('success', message);
      
    } catch (error) {
      console.error("Import error:", error);
      setImportProgress(null);
      showNotification('error', `‚ùå Erreur d'importation: ${error instanceof Error ? error.message : "Erreur inconnue"}. V√©rifiez le format de votre fichier.`);
    }
  };
  
  // handleSupabaseImport supprim√© pour lib√©rer de l'espace

  const handleExport = (format: 'csv' | 'xlsx') => {
    if (contacts.length === 0) {
      showNotification('info', "Aucun contact √† exporter.");
      return;
    }
    exportContactsToFile(contacts, format);
    showNotification('success', `Contacts export√©s au format ${format.toUpperCase()}.`);
  };



  const toggleTheme = () => {
    setTheme(prevTheme => (prevTheme === Theme.Light ? Theme.Dark : Theme.Light));
  };
  
  // Obtenir les colonnes essentielles depuis les r√©glages sauvegard√©s
  const getEssentialColumns = () => {
    try {
      const columnConfig = getSavedColumnConfig();
      return Object.keys(columnConfig).filter(column => columnConfig[column]);
    } catch (error) {
      console.error('Erreur lors du chargement de la config des colonnes:', error);
      // Fallback vers la config par d√©faut
      return ["#", "Pr√©nom", "Nom", "Commentaire"];
    }
  };

  // √âtat pour les colonnes essentielles (recharg√© depuis les r√©glages)
  const [essentialColumns, setEssentialColumns] = useState<string[]>(() => getEssentialColumns());

  // Fonction pour recharger les colonnes essentielles depuis les r√©glages
  const reloadEssentialColumns = () => {
    setEssentialColumns(getEssentialColumns());
  };

  const toggleColumnVisibility = (header: string) => {
    // V√©rifier que la colonne est disponible
    if (!availableColumns.includes(header)) {
      showNotification('error', `La colonne "${header}" n'est pas disponible dans les donn√©es actuelles.`);
      return;
    }
    
    // Permettre la modification de toutes les colonnes
    setVisibleColumns(prev => {
      const newVisibleColumns = { ...prev, [header]: !prev[header] };
      console.log('üîß App.tsx - Toggle column visibility:', {
        header,
        'Ancienne valeur': prev[header],
        'Nouvelle valeur': newVisibleColumns[header],
        '√âtat complet': newVisibleColumns
      });
      return newVisibleColumns;
    });
  };

  // Fonction pour afficher toutes les colonnes disponibles
  const showAllAvailableColumns = () => {
    const newVisibleColumns = { ...visibleColumns };
    availableColumns.forEach(header => {
      newVisibleColumns[header] = true;
    });
    setVisibleColumns(newVisibleColumns);
    showNotification('success', 'Toutes les colonnes disponibles sont maintenant affich√©es.');
  };

  // Fonction pour masquer les colonnes non-recommand√©es
  const hideNonEssentialColumns = () => {
    const newVisibleColumns = { ...visibleColumns };
    availableColumns.forEach(header => {
      if (!essentialColumns.includes(header)) {
        newVisibleColumns[header] = false;
      }
    });
    setVisibleColumns(newVisibleColumns);
    showNotification('success', 'Colonnes non-recommand√©es masqu√©es.');
  };

  const handleRefresh = () => {
    showNotification('info', 'Rafra√Æchissement des donn√©es...');
    refreshData();
  };

  // Derived state & constants for rendering
  const searchColumnsOptions = useMemo(() => [
    { value: 'all', label: 'Toutes les colonnes' },
    ...COLUMN_HEADERS.slice(1, COLUMN_HEADERS.length -1) 
      .map((header, idx) => {
        const dataKeyIndex = idx + 1; 
        const dataKey = CONTACT_DATA_KEYS[dataKeyIndex] as keyof Contact | null;
        return {
          value: dataKey || 'all',
          label: header
        };
      })
  ], []);

  const totalContacts = contacts.length;
  const processedContacts = contacts.filter(c => c.statut !== ContactStatus.NonDefini).length;
  const progressPercentage = totalContacts > 0 ? Math.round((processedContacts / totalContacts) * 100) : 0;

  // RibbonButton component homog√©n√©is√©
  const RibbonButton: React.FC<{
    onClick?: () => void;
    onContextMenu?: (e: React.MouseEvent<HTMLElement>) => void;
    icon: React.ReactNode;
    label: string;
    disabled?: boolean;
    className?: string;
    isDropdown?: boolean;
    children?: React.ReactNode;
  }> = ({ onClick, onContextMenu, icon, label, disabled, className, isDropdown = false, children }) => {

    const buttonContent = (
      <>
        {/* Shimmer effect */}
        <div className="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-500">
          <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-1000 ease-out" />
        </div>
        
        {/* Glow effect */}
        <div className="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 bg-gradient-radial from-primary/20 via-transparent to-transparent blur-xl" />
        
        {/* Content */}
        <div className="relative z-10 flex flex-col items-center justify-center h-full w-full">
          <div className="w-4 h-4 mb-1 transition-all duration-300 group-hover:scale-110 group-hover:rotate-12 flex items-center justify-center [&>svg]:w-4 [&>svg]:h-4">
            {icon}
          </div>
          <span className="text-[10px] leading-tight w-full transition-all duration-300 group-hover:font-semibold text-center">
            {label}
          </span>
        </div>
        {children}
      </>
    );

    const buttonClasses = cn(
      "flex flex-col items-center justify-center w-[80px] h-12 ribbon-button-modern",
      "relative overflow-hidden transition-all duration-300 ease-out",
      "hover:scale-105 hover:shadow-lg hover:shadow-primary/20",
      "group cursor-pointer",
      "border border-transparent hover:bg-gradient-to-br hover:from-primary/10 hover:to-accent/10 hover:border-primary/30",
      !disabled && "hover:transform hover:rotate-1",
      disabled && "opacity-50 cursor-not-allowed pointer-events-none",
      className
    );

    if (isDropdown) {
      return (
        <div className={cn(
          // Classes de base du Button ghost sm de shadcn/ui
          "whitespace-nowrap text-sm font-medium disabled:pointer-events-none disabled:opacity-50",
          "[&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0",
          "outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
          "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
          "hover:text-accent-foreground dark:hover:bg-accent/50",
          "rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
          // Classes custom du ribbon
          buttonClasses
        )}>
          {buttonContent}
        </div>
      );
    }

    return (
      <Button
        onClick={onClick}
        onContextMenu={onContextMenu}
        variant="ghost"
        size="sm"
        disabled={disabled}
        className={buttonClasses}
      >
        {buttonContent}
      </Button>
    );
  };

  // Fonction pour ouvrir le modal Cal.com
  const handleCalendarClick = useCallback(() => {
    if (!selectedContact) {
      showNotification('error', 'Veuillez s√©lectionner un contact pour prendre un rendez-vous');
      return;
    }
    
    console.log('üóìÔ∏è Ouverture du modal calendrier pour:', selectedContact.prenom, selectedContact.nom);
    
    // ‚ö†Ô∏è SOLUTION TEMPORAIRE pour X-Frame-Options
    // Cal.com bloque l'embedding avec X-Frame-Options: sameorigin
    // On peut soit essayer l'embed (qui va √©chouer) soit aller directement au nouvel onglet
    
    const useDirectOpen = true; // Changez √† false pour essayer l'embed d'abord
    
    if (useDirectOpen) {
      console.log('üóìÔ∏è Ouverture directe en nouvel onglet (contournement X-Frame-Options)');
      handleDirectCalendarOpen();
    } else {
      console.log('üóìÔ∏è Tentative d\'embedding Cal.com (risque d\'√©chec X-Frame-Options)');
      setIsCalendarModalOpen(true);
    }
  }, [selectedContact, showNotification]);

  // Fonction pour ouvrir directement Cal.com en nouvel onglet
  const handleDirectCalendarOpen = useCallback(() => {
    if (!selectedContact) {
      showNotification('error', 'Veuillez s√©lectionner un contact');
      return;
    }
    
    // S√©parer l'URL de base et les param√®tres existants
    const [baseUrl, existingParams] = calcomUrl.split('?');
    const allParams = new URLSearchParams(existingParams || '');
    
    // Ajouter les param√®tres du contact
    if (selectedContact.nom) allParams.set('name', selectedContact.nom);
    if (selectedContact.prenom) allParams.set('Prenom', selectedContact.prenom);
    if (selectedContact.email && selectedContact.email.trim() !== '') allParams.set('email', selectedContact.email);
    if (selectedContact.telephone) {
      let phoneNumber = selectedContact.telephone.replace(/[\s\-\(\)]/g, '');
      if (!phoneNumber.startsWith('+')) {
        if (phoneNumber.startsWith('0')) {
          phoneNumber = '+33' + phoneNumber.substring(1);
        } else if (!phoneNumber.startsWith('33')) {
          phoneNumber = '+33' + phoneNumber;
        } else {
          phoneNumber = '+' + phoneNumber;
        }
      }
      allParams.set('smsReminderNumber', phoneNumber);
    }
    
    const finalUrl = `${baseUrl}?${allParams.toString()}`;
    console.log('üîó Ouverture Cal.com:', finalUrl);
    console.log('üìù Contact s√©lectionn√©:', { 
      nom: selectedContact.nom, 
      prenom: selectedContact.prenom, 
      email: selectedContact.email,
      telephone: selectedContact.telephone 
    });
    
    window.open(finalUrl, '_blank');
    showNotification('info', `Calendrier ouvert pour ${selectedContact.prenom} ${selectedContact.nom}`);
  }, [selectedContact, showNotification, calcomUrl]);

  // Fonction pour sauvegarder la nouvelle URL Cal.com
  const handleSaveCalcomUrl = useCallback((newUrl: string) => {
    setCalcomUrl(newUrl);
    localStorage.setItem('calcom-url', newUrl);
    setIsCalcomConfigOpen(false);
    showNotification('success', 'URL Cal.com mise √† jour');
  }, [showNotification]);

  // Fonction pour sauvegarder le nouveau template SMS
  const handleSaveSmsTemplate = useCallback((newTemplate: string) => {
    setSmsTemplate(newTemplate);
    localStorage.setItem('sms-template', newTemplate);
    showNotification('success', 'Template SMS mis √† jour');
  }, [showNotification]);

  // Fonction callback quand un RDV est pris avec succ√®s
  const handleCalendarSuccess = useCallback(() => {
    if (selectedContact) {
      showNotification('success', `Rendez-vous pris avec ${selectedContact.prenom} ${selectedContact.nom}`);
      // Optionnel : mettre √† jour la date/heure de RDV du contact
      // updateContact({ id: selectedContact.id, dateRDV: new Date().toISOString().split('T')[0] });
    }
    setIsCalendarModalOpen(false);
  }, [selectedContact, showNotification]);

  // Debug log pour l'√©tat du modal - Supabase supprim√©

  // JSX Return
  // Si l'authentification est en cours de chargement, ne rien afficher
  // L'√©cran de chargement sera g√©r√© par main.tsx
  if (auth.isLoading) {
    return null;
  }

  return (
    <div className={cn(
      "flex h-screen overflow-hidden bg-background", 
      theme === Theme.Dark ? "dark" : ""
    )}>
      {/* Contenu principal */}
      <main className="flex flex-col flex-1 w-full min-h-0 overflow-hidden pt-8">
          {/* Barre de titre personnalis√©e pour Electron */}
          <TitleBar 
            theme={theme} 
            activeTab={activeMenuTab}
            onTabChange={(tab) => {
              if (tab === 'dimicall') {
                setActiveMenuTab(tab);
              }
            }}
            showDimiTable={false}
            onSettingsClick={() => setIsSettingsOpen(true)}
            adbConnectionState={adbConnectionState}
            adbConnecting={adbConnecting}
            activeCallContactId={activeCallContactId}
            onAdbClick={async (e) => {
              if (e.ctrlKey || e.metaKey) {
                setIsAdbLogsDialogOpen(true);
                return;
              }
              
              if (adbConnectionState.isConnected) {
                await disconnectAdb();
                showNotification('info', 'ADB d√©connect√©');
              } else if (!adbConnecting) {
                const success = await connectAdb();
                showNotification(success ? 'success' : 'error', success ? 'ADB connect√©' : '√âchec de connexion ADB');
              }
            }}
            updateState={updateState}
            onUpdateClick={installUpdate}
          />


      
      {/* Notifications */}


      {/* Modal de progression */}
      {importProgress && (
        <Dialog open={true} onOpenChange={() => setImportProgress(null)}>
          <DialogContent className="sm:max-w-md" aria-describedby="import-progress-desc">
            <DialogHeader>
              <DialogTitle className="sr-only">Progression d'import</DialogTitle>
            </DialogHeader>
            <div id="import-progress-desc" className="flex flex-col items-center space-y-4 p-4">
              <div className="w-12 h-12 border-4 border-muted rounded-full animate-spin border-t-primary" />
              <div className="text-center space-y-2">
                <p className="text-sm font-medium">{importProgress.message}</p>
                {importProgress.percentage !== null && (
                  <div className="w-full">
                    <Progress value={importProgress.percentage} className="h-2" />
                    <p className="text-xs text-muted-foreground mt-1">{importProgress.percentage}%</p>
                  </div>
                )}
              </div>
            </div>
          </DialogContent>
        </Dialog>
      )}

      
      {/* Main content */}
      <main className={cn(
        "flex-1 flex flex-col p-3 space-y-3 overflow-hidden w-full min-h-0",
        isAuthModalOpen && "pointer-events-none opacity-50"
      )}>
      {/* Ribbon */}
        <Card className="p-3 ribbon-container w-fit mx-auto shadow-md">
          <div className="flex items-stretch justify-center gap-2 relative">
            
            {/* Communication Group */}
            <div className="flex flex-col items-center">
              <div className="flex gap-2 p-2 border-r border-border pr-4 mr-2 justify-center items-center">
                <RibbonButton 
                  onClick={() => makePhoneCall()} 
                  icon={<Phone />} 
                  label="Appeler" 
                  disabled={!selectedContact}
                  className="min-w-[80px] max-w-[80px] h-12"
                />
                <RibbonButton 
                  onClick={() => selectedContact && setIsEmailDialogOpen(true)} 
                  icon={<Mail />} 
                  label="Email" 
                  disabled={!selectedContact}
                  className="min-w-[80px] max-w-[80px] h-12"
                />
              {/* Bouton SMS avec dropdown */}
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    variant="ghost"
                    size="sm"
                    disabled={!selectedContact}
                    className={cn(
                        "flex flex-col items-center justify-center min-w-[80px] max-w-[80px] h-12 ribbon-button-modern",
                      "relative overflow-hidden transition-all duration-300 ease-out",
                      "hover:scale-105 hover:shadow-lg hover:shadow-primary/20",
                      "group cursor-pointer",
                      "border border-transparent hover:bg-gradient-to-br hover:from-primary/10 hover:to-accent/10 hover:border-primary/30",
                      selectedContact && "hover:transform hover:rotate-1"
                    )}
                  >
                    {/* Shimmer effect */}
                    <div className="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-500">
                      <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-1000 ease-out" />
                    </div>
                    
                    {/* Glow effect */}
                    <div className="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 bg-gradient-radial from-primary/20 via-transparent to-transparent blur-xl" />
                    
                    {/* Content */}
                    <div className="relative z-10 flex flex-col items-center justify-center h-full w-full">
                      <div className="w-4 h-4 mb-1 transition-all duration-300 group-hover:scale-110 group-hover:rotate-12 flex items-center justify-center [&>svg]:w-4 [&>svg]:h-4">
                        <MessageSquare />
                      </div>
                      <span className="text-[10px] leading-tight w-full transition-all duration-300 group-hover:font-semibold text-center">
                        SMS
                      </span>
                    </div>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent 
                  className="w-40 border shadow-lg bg-popover text-popover-foreground z-50" 
                  align="center"
                >
                  <DropdownMenuLabel className="flex items-center gap-2">
                    <MessageSquare className="w-4 h-4" />
                    Envoyer SMS
                  </DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  <DropdownMenuGroup>
                    <DropdownMenuItem 
                      onClick={() => handleSms('Monsieur')}
                      className="cursor-pointer"
                      disabled={!selectedContact}
                    >
                      Monsieur {selectedContact?.nom}
                    </DropdownMenuItem>
                    <DropdownMenuItem 
                      onClick={() => handleSms('Madame')}
                      className="cursor-pointer"
                      disabled={!selectedContact}
                    >
                      Madame {selectedContact?.nom}
                    </DropdownMenuItem>
                  </DropdownMenuGroup>
                </DropdownMenuContent>
              </DropdownMenu>
              </div>
              <span className="text-[9px] text-muted-foreground mt-1 font-medium tracking-wider text-center w-full">Communication</span>
            </div>

            {/* Planification Group */}
            <div className="flex flex-col items-center">
              <div className="flex gap-2 p-2 border-r border-border pr-4 mr-2 justify-center items-center">
                <RibbonButton 
                  onClick={() => selectedContact && setIsRappelDialogOpen(true)} 
                  icon={<Bell />} 
                  label="Rappel" 
                  disabled={!selectedContact}
                  className="min-w-[80px] max-w-[80px] h-12"
                />
                <RibbonButton 
                  onClick={() => selectedContact && setIsRendezVousDialogOpen(true)} 
                  icon={<Calendar />} 
                  label="Rdv" 
                  disabled={!selectedContact}
                  className="min-w-[80px] max-w-[80px] h-12"
                />
                <RibbonButton 
                  onClick={handleCalendarClick} 
                  onContextMenu={(e) => e.preventDefault()}
                  icon={
                    <div className="relative">
                      <CalendarSearch />
                    </div>
                  } 
                  label="Cal.com" 
                  disabled={!selectedContact} 
                  className="min-w-[80px] max-w-[80px] h-12"
                />
              </div>
              <span className="text-[9px] text-muted-foreground mt-1 font-medium tracking-wider text-center w-full">Planification</span>
            </div>

            {/* Qualification Group */}
            <div className="flex flex-col items-center">
              <div className="flex gap-2 p-2 border-r border-border pr-4 mr-2 justify-center items-center">
                <RibbonButton 
                  onClick={() => selectedContact && setIsQualificationDialogOpen(true)} 
                  icon={<FileCheck />} 
                  label="Qualif." 
                  disabled={!selectedContact}
                  className="min-w-[80px] max-w-[80px] h-12"
                />
              </div>
              <span className="text-[9px] text-muted-foreground mt-1 font-medium tracking-wider text-center w-full">Qualification</span>
            </div>

            {/* Recherche Group */}
            <div className="flex flex-col items-center">
              <div className="flex gap-2 p-2 border-r border-border pr-4 mr-2 justify-center items-center">
                <RibbonButton 
                  onClick={() => handleLinkedInSearch()} 
                  icon={<Linkedin />} 
                  label="LinkedIn" 
                  disabled={!selectedContact}
                  className="min-w-[80px] max-w-[80px] h-12"
                />
                <RibbonButton 
                  onClick={() => handleGoogleSearch()} 
                  icon={<Globe />} 
                  label="Google" 
                  disabled={!selectedContact}
                  className="min-w-[80px] max-w-[80px] h-12"
                />
              
              {/* Dropdown Auto-Search */}
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    variant="ghost"
                    size="sm"
                    className={cn(
                        "flex flex-col items-center justify-center min-w-[80px] max-w-[80px] h-12 ribbon-button-modern",
                      "relative overflow-hidden transition-all duration-300 ease-out",
                      "hover:scale-105 hover:shadow-lg hover:shadow-primary/20",
                      "group cursor-pointer",
                      "border border-transparent hover:bg-gradient-to-br hover:from-primary/10 hover:to-accent/10 hover:border-primary/30",
                      "hover:transform hover:rotate-1"
                    )}
                  >
                    {/* Shimmer effect */}
                    <div className="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-500">
                      <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-1000 ease-out" />
                    </div>
                    
                    {/* Glow effect */}
                    <div className="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 bg-gradient-radial from-primary/20 via-transparent to-transparent blur-xl" />
                    
                    {/* Content */}
                    <div className="relative z-10 flex flex-col items-center justify-center h-full w-full">
                      <div className="w-4 h-4 mb-1 transition-all duration-300 group-hover:scale-110 group-hover:rotate-12 flex items-center justify-center [&>svg]:w-4 [&>svg]:h-4">
                        {autoSearchMode === 'disabled' ? <X /> :
                         autoSearchMode === 'linkedin' ? <Linkedin /> :
                         <Globe />}
                      </div>
                      <span className="text-[10px] leading-tight w-full transition-all duration-300 group-hover:font-semibold text-center">
                        {autoSearchMode === 'disabled' ? 'D√©sactiv√©' :
                         autoSearchMode === 'linkedin' ? 'Auto-LinkedIn' :
                         'Auto-Google'}
                      </span>
                    </div>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent 
                  className="w-56 border shadow-lg bg-popover text-popover-foreground z-50" 
                  align="center"
                >
                  <DropdownMenuLabel className="flex items-center gap-2">
                    <Infinity className="w-4 h-4" />
                    Mode de recherche automatique
                  </DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  <DropdownMenuGroup>
                    <DropdownMenuItem 
                      onClick={() => {
                        setAutoSearchMode('disabled');
                        console.log('üîß [AUTO-SEARCH] Mode chang√© vers: D√©sactiv√©');
                      }}
                      className="cursor-pointer"
                    >
                      <X className="mr-2 h-4 w-4 text-red-500" />
                      <span>D√©sactiv√©</span>
                      {autoSearchMode === 'disabled' && <span className="ml-auto text-xs opacity-70">Actuel</span>}
                    </DropdownMenuItem>
                    <DropdownMenuItem 
                      onClick={() => {
                        setAutoSearchMode('linkedin');
                        console.log('üîß [AUTO-SEARCH] Mode chang√© vers: Auto-LinkedIn');
                      }}
                      className="cursor-pointer"
                    >
                      <Linkedin className="mr-2 h-4 w-4 text-blue-500" />
                      <span>Auto-LinkedIn</span>
                      {autoSearchMode === 'linkedin' && <span className="ml-auto text-xs opacity-70">Actuel</span>}
                    </DropdownMenuItem>
                    <DropdownMenuItem 
                      onClick={() => {
                        setAutoSearchMode('google');
                        console.log('üîß [AUTO-SEARCH] Mode chang√© vers: Auto-Google');
                      }}
                      className="cursor-pointer"
                    >
                      <Globe className="mr-2 h-4 w-4 text-green-500" />
                      <span>Auto-Google</span>
                      {autoSearchMode === 'google' && <span className="ml-auto text-xs opacity-70">Actuel</span>}
                    </DropdownMenuItem>
                  </DropdownMenuGroup>
                </DropdownMenuContent>
              </DropdownMenu>
              </div>
              <span className="text-[9px] text-muted-foreground mt-1 font-medium tracking-wider text-center w-full">Recherche</span>
            </div>

            {/* Donn√©es Group */}
            <div className="flex flex-col items-center">
              <div className="flex gap-2 p-2 justify-center items-center">
                                <RibbonButton 
                  onClick={() => document.getElementById('fileImporter')?.click()}
                  icon={<Upload />} 
                  label="Importer"
                  className="min-w-[80px] max-w-[80px] h-12"
                />
              <input type="file" id="fileImporter" accept=".csv, .tsv, .xlsx, .xls" className="hidden" onChange={(e) => e.target.files && handleImportFile(e.target.files)} />
              
              {/* Bouton Export avec menu d√©roulant */}
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    variant="ghost"
                    size="sm"
                    disabled={contacts.length === 0}
                    className={cn(
                        "flex flex-col items-center justify-center min-w-[80px] max-w-[80px] h-12 ribbon-button-modern",
                      "relative overflow-hidden transition-all duration-300 ease-out",
                      "hover:scale-105 hover:shadow-lg hover:shadow-primary/20",
                      "group cursor-pointer",
                      "border border-transparent hover:bg-gradient-to-br hover:from-primary/10 hover:to-accent/10 hover:border-primary/30",
                      contacts.length > 0 && "hover:transform hover:rotate-1"
                    )}
                  >
                    {/* Shimmer effect */}
                    <div className="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-500">
                      <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-1000 ease-out" />
                    </div>
                    
                    {/* Glow effect */}
                    <div className="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 bg-gradient-radial from-primary/20 via-transparent to-transparent blur-xl" />
                    
                    {/* Content */}
                    <div className="relative z-10 flex flex-col items-center justify-center h-full w-full">
                      <div className="w-4 h-4 mb-1 transition-all duration-300 group-hover:scale-110 group-hover:rotate-12 flex items-center justify-center [&>svg]:w-4 [&>svg]:h-4">
                        <Download />
                      </div>
                      <span className="text-[10px] leading-tight w-full transition-all duration-300 group-hover:font-semibold text-center">
                        Export
                      </span>
                    </div>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent 
                  className="w-40 border shadow-lg bg-popover text-popover-foreground z-50" 
                  align="center"
                >
                  <DropdownMenuLabel className="flex items-center gap-2">
                    <Download className="w-4 h-4" />
                    Format d'export
                  </DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  <DropdownMenuGroup>
                                         <DropdownMenuItem 
                       onClick={() => handleExport('csv')}
                       className="cursor-pointer"
                       disabled={contacts.length === 0}
                     >
                       <span className="mr-2 text-green-600">CSV</span>
                       <span className="text-xs text-muted-foreground">Fichier texte</span>
                     </DropdownMenuItem>
                     <DropdownMenuItem 
                       onClick={() => handleExport('xlsx')}
                       className="cursor-pointer"
                       disabled={contacts.length === 0}
                     >
                       <FileSpreadsheet className="mr-2 h-4 w-4 text-green-600" />
                       <span>Excel</span>
                       <span className="ml-auto text-xs text-muted-foreground">.xlsx</span>
                     </DropdownMenuItem>
                  </DropdownMenuGroup>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
              <span className="text-[9px] text-muted-foreground mt-1 font-medium tracking-wider text-center w-full">Donn√©es</span>
            </div>
          </div>
        </Card>

        {/* Search bar area */}
        <div className="flex items-stretch gap-3">
          {/* 1er encadr√©: Recherche */}
          <div className="flex-1 flex gap-3 items-center bg-card rounded-lg p-3 shadow-sm border">
            <Select value={searchColumn} onValueChange={(value) => setSearchColumn(value as keyof Contact | 'all')}>
              <SelectTrigger className="w-44 text-sm h-9 border-border/50 focus:border-primary">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {searchColumnsOptions.map(opt => <SelectItem key={opt.value} value={opt.value}>{opt.label}</SelectItem>)}
              </SelectContent>
            </Select>
            <div className="flex-1 relative">
              <Input
                type="text"
                placeholder="Rechercher..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="text-sm h-9 pl-9 border-border/50 focus:border-primary"
              />
              <Filter className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            </div>
          </div>

          {/* 2√®me encadr√©: Colonnes */}
          <div className="flex items-center bg-card rounded-lg p-3 shadow-sm border">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" size="sm" className="h-9">
                  <Settings2 className="h-4 w-4 mr-2" />
                  Colonnes
                  <Badge variant="secondary" className="ml-2 h-4 px-1 text-xs">
                    {availableColumns.filter(col => visibleColumns[col]).length}
                  </Badge>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-64 bg-background/95 backdrop-blur-sm border shadow-lg">
                <DropdownMenuLabel className="flex items-center gap-2">
                  <Eye className="h-4 w-4" />
                  Gestion des colonnes
                </DropdownMenuLabel>
                <DropdownMenuSeparator />
                
                {/* Afficher uniquement les colonnes disponibles dans les donn√©es */}
                {availableColumns
                  // Afficher toutes les colonnes disponibles
                  .map((header) => {
                    const isEssential = essentialColumns.includes(header);
                    return (
                      <DropdownMenuCheckboxItem
                        key={header}
                        className="flex items-center gap-2"
                        checked={visibleColumns[header] || false}
                        onCheckedChange={() => toggleColumnVisibility(header)}
                        onSelect={(e) => e.preventDefault()} // Emp√™che la fermeture du menu
                      >
                        <span className="flex-1">{header}</span>
                        {isEssential && (
                          <span className="text-xs text-muted-foreground ml-2">
                            (recommand√©e)
                          </span>
                        )}
                      </DropdownMenuCheckboxItem>
                    );
                  })}

                <DropdownMenuSeparator />
                
                {/* Actions rapides */}
                <DropdownMenuCheckboxItem
                  className="flex items-center gap-2 text-primary"
                  checked={false}
                  onCheckedChange={showAllAvailableColumns}
                  onSelect={(e) => e.preventDefault()} // Emp√™che la fermeture du menu
                >
                  <Eye className="h-4 w-4" />
                  Afficher toutes les colonnes disponibles
                </DropdownMenuCheckboxItem>
                
                <DropdownMenuCheckboxItem
                  className="flex items-center gap-2 text-orange-600 dark:text-orange-400"
                  checked={false}
                  onCheckedChange={hideNonEssentialColumns}
                  onSelect={(e) => e.preventDefault()} // Emp√™che la fermeture du menu
                >
                  <Eye className="h-4 w-4" />
                  Masquer les colonnes non-recommand√©es
                </DropdownMenuCheckboxItem>
                
                {/* Informations sur les colonnes */}
                <DropdownMenuSeparator />
                <div className="px-2 py-1.5 text-xs text-muted-foreground">
                  {availableColumns.length} colonne{availableColumns.length > 1 ? 's' : ''} disponible{availableColumns.length > 1 ? 's' : ''} dans les donn√©es
                </div>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
          
          {/* 3√®me encadr√©: Chart */}
          <div className="flex items-center bg-card rounded-lg p-3 shadow-sm border">
            <div className="relative inline-flex items-center justify-center px-2 py-0.5">
              <svg width="32" height="32" className="transform -rotate-90">
                <circle 
                  cx="16" 
                  cy="16" 
                  r="14" 
                  stroke="currentColor" 
                  strokeWidth="2" 
                  fill="transparent" 
                  className="text-muted-foreground/20"
                />
                <circle 
                  cx="16" 
                  cy="16" 
                  r="14" 
                  stroke="#3B82F6" 
                  strokeWidth="2" 
                  fill="transparent" 
                  strokeDasharray="87.96459430051421" 
                  strokeDashoffset={87.96459430051421 - (87.96459430051421 * progressPercentage / 100)}
                  className="transition-all duration-300 ease-in-out" 
                  strokeLinecap="round"
                />
              </svg>
              <div className="absolute inset-0 flex items-center justify-center">
                <span className="text-[9px] font-medium text-muted-foreground">{Math.round(progressPercentage)}%</span>
              </div>
            </div>
          </div>
        </div>

        {/* Content area */}
        <div className="flex-1 flex overflow-hidden min-h-0">
          {/* Contact table */}
          <div className="flex-1 flex flex-col overflow-hidden min-h-0">
            <div className="flex-1 bg-card rounded-lg border shadow-sm overflow-hidden">
              <ContactTable
                ref={contactTableRef}
                contacts={filteredContacts}
                callStates={callStates}
                onSelectContact={handleRowSelection}
                selectedContactId={selectedContact?.id || null}
                onUpdateContact={updateContact}
                onDeleteContact={handleDeleteContact}
                activeCallContactId={activeCallContactId}
                theme={theme}
                visibleColumns={visibleColumns}
                columnHeaders={availableColumns.length > 0 ? availableColumns : COLUMN_HEADERS}
                contactDataKeys={availableDataKeys.length > 0 ? availableDataKeys : CONTACT_DATA_KEYS as (keyof Contact | null)[]}
                onToggleColumnVisibility={toggleColumnVisibility}
                availableColumns={availableColumns}
                onFileImport={handleSingleFileImport}
              />
            </div>
          </div>
        </div>
              </main>



      {/* Dialogs */}
      {selectedContact && isEmailDialogOpen && (
        <EmailDialog
          isOpen={isEmailDialogOpen}
          onClose={() => setIsEmailDialogOpen(false)}
          contact={selectedContact}
          showNotification={showNotification}
          onUpdateContact={updateContact}
        />
      )}
      {selectedContact && isRappelDialogOpen && (
        <RappelDialog
          isOpen={isRappelDialogOpen}
          onClose={() => setIsRappelDialogOpen(false)}
          contact={selectedContact}
          onSave={(date, time) => {
            updateContact({ id: selectedContact.id, dateRappel: date, heureRappel: time });
            showNotification('success', `Rappel d√©fini pour ${selectedContact.prenom} le ${date} √† ${time}.`);
            setIsRappelDialogOpen(false);
          }}
        />
      )}
      {selectedContact && isRendezVousDialogOpen && (
        <RendezVousDialog
          isOpen={isRendezVousDialogOpen}
          onClose={() => setIsRendezVousDialogOpen(false)}
          contact={selectedContact}
          onSave={(date, time) => {
            updateContact({ id: selectedContact.id, dateRDV: date, heureRDV: time });
            showNotification('success', `Rendez-vous programm√© pour ${selectedContact.prenom} le ${date} √† ${time}.`);
            setIsRendezVousDialogOpen(false);
          }}
        />
      )}
      {selectedContact && isQualificationDialogOpen && (
        <QualificationDialog
          isOpen={isQualificationDialogOpen}
          onClose={() => setIsQualificationDialogOpen(false)}
          onSave={(comment) => {
            updateContact({ id: selectedContact.id, commentaire: comment });
            showNotification('success', `Qualification enregistr√©e pour ${selectedContact.prenom}.`);
            setIsQualificationDialogOpen(false);
          }}
          theme={theme}
        />
      )}
      {isFnKeysInfoOpen && (
        <GenericInfoDialog
          isOpen={isFnKeysInfoOpen}
          onClose={() => setIsFnKeysInfoOpen(false)}
          title="Raccourcis Clavier"
          content={
            <div className="space-y-4">
              <p className="text-sm text-muted-foreground">
                Utilisez les touches de fonction pour interagir rapidement avec le contact s√©lectionn√© :
              </p>
              
              {/* F1 pour l'appel */}
              <div className="space-y-2">
                <p className="text-xs font-medium text-muted-foreground">Action d'appel :</p>
                <div className="flex items-center gap-3 p-2 rounded-lg bg-blue-50 dark:bg-blue-900/20">
                  <Badge variant="outline" className="font-mono text-xs bg-blue-100 dark:bg-blue-800">
                    F1
                  </Badge>
                  <span className="text-sm font-medium">üìû Appeler le contact</span>
                </div>
              </div>
              
              {/* F2-F10 pour les statuts */}
              <div className="space-y-2">
                <p className="text-xs font-medium text-muted-foreground">Changement de statut :</p>
                <div className="grid grid-cols-1 gap-2">
                  {shortcutService.getShortcuts().map(({ key, label }) => (
                    <div key={key} className="flex items-center gap-3 p-2 rounded-lg bg-muted/50">
                      <Badge variant="outline" className="font-mono text-xs">
                        {key}
                      </Badge>
                      <span className="text-sm">{label}</span>
                    </div>
                  ))}
                </div>
              </div>
              
              <div className="flex justify-center pt-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    setIsFnKeysInfoOpen(false);
                    setIsShortcutConfigOpen(true);
                  }}
                  className="text-xs"
                >
                  Personnaliser les raccourcis F2-F10
                </Button>
              </div>
            </div>
          }
          theme={theme}
        />
              )}
      {/* Supabase dialog supprim√© pour lib√©rer de l'espace */}
       
       {/* Dialog de configuration des raccourcis */}
       {isShortcutConfigOpen && (
         <ShortcutConfigDialog
           isOpen={isShortcutConfigOpen}
           onClose={() => setIsShortcutConfigOpen(false)}
           theme={theme}
           onSave={() => {
             showNotification('success', 'Configuration des raccourcis sauvegard√©e', 3000);
           }}
         />
       )}

       {/* Dialog des r√©glages */}
       {isSettingsOpen && (
         <SettingsDialog
           isOpen={isSettingsOpen}
           onClose={() => setIsSettingsOpen(false)}
           onSave={() => {
             reloadEssentialColumns(); // Recharger les colonnes essentielles
             showNotification('success', 'R√©glages sauvegard√©s avec succ√®s', 3000);
           }}
           calcomUrl={calcomUrl}
           onCalcomUrlChange={handleSaveCalcomUrl}
           smsTemplate={smsTemplate}
           onSmsTemplateChange={handleSaveSmsTemplate}
           theme={theme}
           onThemeChange={setTheme}
         />
       )}

       {/* Indicateur de raccourci */}
       <ShortcutIndicator
         isVisible={shortcutIndicator.isVisible}
         keyPressed={shortcutIndicator.key}
         statusLabel={shortcutIndicator.label}
         theme={theme}
         onClose={() => setShortcutIndicator({ isVisible: false, key: '', label: '' })}
       />
        
        {/* Dialog des logs ADB */}
      {isAdbLogsDialogOpen && (
        <Dialog open={isAdbLogsDialogOpen} onOpenChange={setIsAdbLogsDialogOpen}>
          <DialogContent className="max-w-4xl max-h-[80vh]" aria-describedby="adb-logs-desc">
            <DialogHeader>
              <DialogTitle>Logs ADB - Debug</DialogTitle>
            </DialogHeader>
            <div id="adb-logs-desc" className="space-y-4">
              <div className="flex items-center justify-between">
                <div></div>
                <div className="flex items-center gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setAdbAutoDetection(!adbConnectionState.autoDetectionEnabled)}
                  >
                    {adbConnectionState.autoDetectionEnabled ? 'D√©sactiver' : 'Activer'} d√©tection auto
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={async () => {
                      const success = await restartAdb();
                      showNotification(success ? 'success' : 'error', success ? 'Serveur ADB red√©marr√©' : 'Erreur lors du red√©marrage ADB');
                    }}
                  >
                    Red√©marrer ADB
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => {
                      const logs = getAdbLogs().join('\n');
                      navigator.clipboard.writeText(logs);
                      showNotification('success', 'Logs copi√©s dans le presse-papier');
                    }}
                  >
                    Copier logs
                  </Button>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <strong>√âtat:</strong> {adbConnectionState.isConnected ? '‚úÖ Connect√©' : '‚ùå D√©connect√©'}
                </div>
                <div>
                  <strong>D√©tection auto:</strong> {adbConnectionState.autoDetectionEnabled ? '‚úÖ Activ√©e' : '‚ùå D√©sactiv√©e'}
                </div>
                {adbConnectionState.device && (
                  <>
                    <div>
                      <strong>Appareil:</strong> {adbConnectionState.device.name}
                    </div>
                    <div>
                      <strong>S√©rie:</strong> {adbConnectionState.device.serial}
                    </div>
                  </>
                )}
                {adbConnectionState.batteryLevel && (
                  <div>
                    <strong>Batterie:</strong> {adbConnectionState.batteryLevel}% {adbConnectionState.isCharging ? 'üîå' : 'üîã'}
                  </div>
                )}
              </div>
              
              {adbConnectionState.error && (
                <div className="p-3 bg-red-500/10 border border-red-500/20 rounded-lg">
                  <strong className="text-red-600">Erreur:</strong> {adbConnectionState.error}
                </div>
              )}
              
              <div className="space-y-2">
                <h3 className="font-medium">Logs en temps r√©el:</h3>
                <div className="bg-muted/50 rounded-lg p-3 max-h-96 overflow-y-auto hide-scrollbar font-mono text-xs">
                  {getAdbLogs().length > 0 ? (
                    getAdbLogs().map((log, index) => (
                      <div key={index} className="mb-1">
                        {log}
                      </div>
                    ))
                  ) : (
                    <div className="text-muted-foreground">Aucun log disponible</div>
                  )}
                </div>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      )}

      {/* Modal Cal.com */}
      <CalendarModal
        open={isCalendarModalOpen}
        onOpenChange={setIsCalendarModalOpen}
        contact={selectedContact || undefined}
        theme={theme}
        onSuccess={handleCalendarSuccess}
      />

      {/* Modal de configuration Cal.com */}
      {isCalcomConfigOpen && (
        <Dialog open={isCalcomConfigOpen} onOpenChange={setIsCalcomConfigOpen}>
          <DialogContent className="sm:max-w-md" aria-describedby="calcom-config-desc">
            <DialogHeader>
              <DialogTitle>Configuration Cal.com</DialogTitle>
              <DialogDescription id="calcom-config-desc">
                Configurez l'URL de votre compte Cal.com pour la prise de rendez-vous.
              </DialogDescription>
            </DialogHeader>
            
            <div className="space-y-4 py-4">
              <div className="space-y-2">
                <label htmlFor="calcom-url" className="text-sm font-medium">
                  URL Cal.com
                </label>
                <input
                  id="calcom-url"
                  type="url"
                  defaultValue={calcomUrl}
                  placeholder="https://cal.com/votre-nom/votre-√©v√©nement"
                  className="w-full px-3 py-2 border border-input rounded-md text-sm bg-background"
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      const input = e.target as HTMLInputElement;
                      if (input.value.trim()) {
                        handleSaveCalcomUrl(input.value.trim());
                      }
                    }
                  }}
                />
              </div>
              
              <div className="text-xs text-muted-foreground space-y-1">
                <p>‚Ä¢ Utilisez l'URL compl√®te de votre √©v√©nement Cal.com</p>
                <p>‚Ä¢ Format: https://cal.com/votre-nom/votre-√©v√©nement</p>
                <p>‚Ä¢ Les param√®tres du contact seront ajout√©s automatiquement</p>
              </div>
            </div>
            
            <DialogFooter className="gap-2">
              <Button variant="outline" onClick={() => setIsCalcomConfigOpen(false)}>
                Annuler
              </Button>
              <Button 
                onClick={() => {
                  const input = document.getElementById('calcom-url') as HTMLInputElement;
                  if (input?.value.trim()) {
                    handleSaveCalcomUrl(input.value.trim());
                  }
                }}
                className="bg-primary text-primary-foreground hover:bg-primary/90"
              >
                Sauvegarder
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}

      {/* Modal d'authentification */}
              <AuthModal
          isOpen={isAuthModalOpen}
          onClose={() => setIsAuthModalOpen(false)}
        />
        </main>
      </div>
  );
};

export default App;